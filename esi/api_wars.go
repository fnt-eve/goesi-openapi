/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type WarsAPI interface {

	/*
	GetWars List wars

	Return a list of wars

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetWarsRequest
	*/
	GetWars(ctx context.Context) ApiGetWarsRequest

	// GetWarsExecute executes the request
	//  @return []int64
	GetWarsExecute(r ApiGetWarsRequest) ([]int64, *http.Response, error)

	/*
	GetWarsWarId Get war information

	Return details about a war

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param warId
	@return ApiGetWarsWarIdRequest
	*/
	GetWarsWarId(ctx context.Context, warId int64) ApiGetWarsWarIdRequest

	// GetWarsWarIdExecute executes the request
	//  @return WarsWarIdGet
	GetWarsWarIdExecute(r ApiGetWarsWarIdRequest) (*WarsWarIdGet, *http.Response, error)

	/*
	GetWarsWarIdKillmails List kills for a war

	Return a list of kills related to a war

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param warId
	@return ApiGetWarsWarIdKillmailsRequest
	*/
	GetWarsWarIdKillmails(ctx context.Context, warId int64) ApiGetWarsWarIdKillmailsRequest

	// GetWarsWarIdKillmailsExecute executes the request
	//  @return []CharactersCharacterIdKillmailsRecentGetInner
	GetWarsWarIdKillmailsExecute(r ApiGetWarsWarIdKillmailsRequest) ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error)
}

// WarsAPIService WarsAPI service
type WarsAPIService service

type ApiGetWarsRequest struct {
	ctx context.Context
	ApiService WarsAPI
	xCompatibilityDate *string
	maxWarId *int64
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetWarsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetWarsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetWarsRequest) MaxWarId(maxWarId int64) ApiGetWarsRequest {
	r.maxWarId = &maxWarId
	return r
}

// The language to use for the response.
func (r ApiGetWarsRequest) AcceptLanguage(acceptLanguage string) ApiGetWarsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetWarsRequest) IfNoneMatch(ifNoneMatch string) ApiGetWarsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetWarsRequest) XTenant(xTenant string) ApiGetWarsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetWarsRequest) Execute() ([]int64, *http.Response, error) {
	return r.ApiService.GetWarsExecute(r)
}

/*
GetWars List wars

Return a list of wars

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetWarsRequest
*/
func (a *WarsAPIService) GetWars(ctx context.Context) ApiGetWarsRequest {
	return ApiGetWarsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []int64
func (a *WarsAPIService) GetWarsExecute(r ApiGetWarsRequest) ([]int64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarsAPIService.GetWars")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.maxWarId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_war_id", r.maxWarId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWarsWarIdRequest struct {
	ctx context.Context
	ApiService WarsAPI
	warId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetWarsWarIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetWarsWarIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetWarsWarIdRequest) AcceptLanguage(acceptLanguage string) ApiGetWarsWarIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetWarsWarIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetWarsWarIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetWarsWarIdRequest) XTenant(xTenant string) ApiGetWarsWarIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetWarsWarIdRequest) Execute() (*WarsWarIdGet, *http.Response, error) {
	return r.ApiService.GetWarsWarIdExecute(r)
}

/*
GetWarsWarId Get war information

Return details about a war

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param warId
 @return ApiGetWarsWarIdRequest
*/
func (a *WarsAPIService) GetWarsWarId(ctx context.Context, warId int64) ApiGetWarsWarIdRequest {
	return ApiGetWarsWarIdRequest{
		ApiService: a,
		ctx: ctx,
		warId: warId,
	}
}

// Execute executes the request
//  @return WarsWarIdGet
func (a *WarsAPIService) GetWarsWarIdExecute(r ApiGetWarsWarIdRequest) (*WarsWarIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WarsWarIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarsAPIService.GetWarsWarId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wars/{war_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"war_id"+"}", url.PathEscape(parameterValueToString(r.warId, "warId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWarsWarIdKillmailsRequest struct {
	ctx context.Context
	ApiService WarsAPI
	warId int64
	xCompatibilityDate *string
	page *int32
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetWarsWarIdKillmailsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetWarsWarIdKillmailsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetWarsWarIdKillmailsRequest) Page(page int32) ApiGetWarsWarIdKillmailsRequest {
	r.page = &page
	return r
}

// The language to use for the response.
func (r ApiGetWarsWarIdKillmailsRequest) AcceptLanguage(acceptLanguage string) ApiGetWarsWarIdKillmailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetWarsWarIdKillmailsRequest) IfNoneMatch(ifNoneMatch string) ApiGetWarsWarIdKillmailsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetWarsWarIdKillmailsRequest) XTenant(xTenant string) ApiGetWarsWarIdKillmailsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetWarsWarIdKillmailsRequest) Execute() ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error) {
	return r.ApiService.GetWarsWarIdKillmailsExecute(r)
}

/*
GetWarsWarIdKillmails List kills for a war

Return a list of kills related to a war

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param warId
 @return ApiGetWarsWarIdKillmailsRequest
*/
func (a *WarsAPIService) GetWarsWarIdKillmails(ctx context.Context, warId int64) ApiGetWarsWarIdKillmailsRequest {
	return ApiGetWarsWarIdKillmailsRequest{
		ApiService: a,
		ctx: ctx,
		warId: warId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdKillmailsRecentGetInner
func (a *WarsAPIService) GetWarsWarIdKillmailsExecute(r ApiGetWarsWarIdKillmailsRequest) ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdKillmailsRecentGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarsAPIService.GetWarsWarIdKillmails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wars/{war_id}/killmails"
	localVarPath = strings.Replace(localVarPath, "{"+"war_id"+"}", url.PathEscape(parameterValueToString(r.warId, "warId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
