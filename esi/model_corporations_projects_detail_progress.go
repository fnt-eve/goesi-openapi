/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CorporationsProjectsDetailProgress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorporationsProjectsDetailProgress{}

// CorporationsProjectsDetailProgress struct for CorporationsProjectsDetailProgress
type CorporationsProjectsDetailProgress struct {
	// Current progress
	Current int64 `json:"current"`
	// Desired progress
	Desired int64 `json:"desired"`
}

type _CorporationsProjectsDetailProgress CorporationsProjectsDetailProgress

// NewCorporationsProjectsDetailProgress instantiates a new CorporationsProjectsDetailProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporationsProjectsDetailProgress(current int64, desired int64) *CorporationsProjectsDetailProgress {
	this := CorporationsProjectsDetailProgress{}
	this.Current = current
	this.Desired = desired
	return &this
}

// NewCorporationsProjectsDetailProgressWithDefaults instantiates a new CorporationsProjectsDetailProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporationsProjectsDetailProgressWithDefaults() *CorporationsProjectsDetailProgress {
	this := CorporationsProjectsDetailProgress{}
	return &this
}

// GetCurrent returns the Current field value
func (o *CorporationsProjectsDetailProgress) GetCurrent() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *CorporationsProjectsDetailProgress) GetCurrentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *CorporationsProjectsDetailProgress) SetCurrent(v int64) {
	o.Current = v
}

// GetDesired returns the Desired field value
func (o *CorporationsProjectsDetailProgress) GetDesired() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Desired
}

// GetDesiredOk returns a tuple with the Desired field value
// and a boolean to check if the value has been set.
func (o *CorporationsProjectsDetailProgress) GetDesiredOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Desired, true
}

// SetDesired sets field value
func (o *CorporationsProjectsDetailProgress) SetDesired(v int64) {
	o.Desired = v
}

func (o CorporationsProjectsDetailProgress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorporationsProjectsDetailProgress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["current"] = o.Current
	toSerialize["desired"] = o.Desired
	return toSerialize, nil
}

func (o *CorporationsProjectsDetailProgress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"current",
		"desired",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorporationsProjectsDetailProgress := _CorporationsProjectsDetailProgress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorporationsProjectsDetailProgress)

	if err != nil {
		return err
	}

	*o = CorporationsProjectsDetailProgress(varCorporationsProjectsDetailProgress)

	return err
}

type NullableCorporationsProjectsDetailProgress struct {
	value *CorporationsProjectsDetailProgress
	isSet bool
}

func (v NullableCorporationsProjectsDetailProgress) Get() *CorporationsProjectsDetailProgress {
	return v.value
}

func (v *NullableCorporationsProjectsDetailProgress) Set(val *CorporationsProjectsDetailProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailProgress(val *CorporationsProjectsDetailProgress) *NullableCorporationsProjectsDetailProgress {
	return &NullableCorporationsProjectsDetailProgress{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


