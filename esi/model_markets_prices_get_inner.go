/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MarketsPricesGetInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketsPricesGetInner{}

// MarketsPricesGetInner struct for MarketsPricesGetInner
type MarketsPricesGetInner struct {
	AdjustedPrice *float64 `json:"adjusted_price,omitempty"`
	AveragePrice *float64 `json:"average_price,omitempty"`
	TypeId int64 `json:"type_id"`
}

type _MarketsPricesGetInner MarketsPricesGetInner

// NewMarketsPricesGetInner instantiates a new MarketsPricesGetInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketsPricesGetInner(typeId int64) *MarketsPricesGetInner {
	this := MarketsPricesGetInner{}
	this.TypeId = typeId
	return &this
}

// NewMarketsPricesGetInnerWithDefaults instantiates a new MarketsPricesGetInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketsPricesGetInnerWithDefaults() *MarketsPricesGetInner {
	this := MarketsPricesGetInner{}
	return &this
}

// GetAdjustedPrice returns the AdjustedPrice field value if set, zero value otherwise.
func (o *MarketsPricesGetInner) GetAdjustedPrice() float64 {
	if o == nil || IsNil(o.AdjustedPrice) {
		var ret float64
		return ret
	}
	return *o.AdjustedPrice
}

// GetAdjustedPriceOk returns a tuple with the AdjustedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketsPricesGetInner) GetAdjustedPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AdjustedPrice) {
		return nil, false
	}
	return o.AdjustedPrice, true
}

// HasAdjustedPrice returns a boolean if a field has been set.
func (o *MarketsPricesGetInner) HasAdjustedPrice() bool {
	if o != nil && !IsNil(o.AdjustedPrice) {
		return true
	}

	return false
}

// SetAdjustedPrice gets a reference to the given float64 and assigns it to the AdjustedPrice field.
func (o *MarketsPricesGetInner) SetAdjustedPrice(v float64) {
	o.AdjustedPrice = &v
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *MarketsPricesGetInner) GetAveragePrice() float64 {
	if o == nil || IsNil(o.AveragePrice) {
		var ret float64
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketsPricesGetInner) GetAveragePriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AveragePrice) {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *MarketsPricesGetInner) HasAveragePrice() bool {
	if o != nil && !IsNil(o.AveragePrice) {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given float64 and assigns it to the AveragePrice field.
func (o *MarketsPricesGetInner) SetAveragePrice(v float64) {
	o.AveragePrice = &v
}

// GetTypeId returns the TypeId field value
func (o *MarketsPricesGetInner) GetTypeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *MarketsPricesGetInner) GetTypeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *MarketsPricesGetInner) SetTypeId(v int64) {
	o.TypeId = v
}

func (o MarketsPricesGetInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketsPricesGetInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustedPrice) {
		toSerialize["adjusted_price"] = o.AdjustedPrice
	}
	if !IsNil(o.AveragePrice) {
		toSerialize["average_price"] = o.AveragePrice
	}
	toSerialize["type_id"] = o.TypeId
	return toSerialize, nil
}

func (o *MarketsPricesGetInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarketsPricesGetInner := _MarketsPricesGetInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarketsPricesGetInner)

	if err != nil {
		return err
	}

	*o = MarketsPricesGetInner(varMarketsPricesGetInner)

	return err
}

type NullableMarketsPricesGetInner struct {
	value *MarketsPricesGetInner
	isSet bool
}

func (v NullableMarketsPricesGetInner) Get() *MarketsPricesGetInner {
	return v.value
}

func (v *NullableMarketsPricesGetInner) Set(val *MarketsPricesGetInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketsPricesGetInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketsPricesGetInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketsPricesGetInner(val *MarketsPricesGetInner) *NullableMarketsPricesGetInner {
	return &NullableMarketsPricesGetInner{value: val, isSet: true}
}

func (v NullableMarketsPricesGetInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketsPricesGetInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


