/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type WalletAPI interface {

	/*
	GetCharactersCharacterIdWallet Get a character's wallet balance

	Returns a character's wallet balance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@return ApiGetCharactersCharacterIdWalletRequest
	*/
	GetCharactersCharacterIdWallet(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdWalletRequest

	// GetCharactersCharacterIdWalletExecute executes the request
	//  @return float64
	GetCharactersCharacterIdWalletExecute(r ApiGetCharactersCharacterIdWalletRequest) (float64, *http.Response, error)

	/*
	GetCharactersCharacterIdWalletJournal Get character wallet journal

	Retrieve the given character's wallet journal going 30 days back

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@return ApiGetCharactersCharacterIdWalletJournalRequest
	*/
	GetCharactersCharacterIdWalletJournal(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdWalletJournalRequest

	// GetCharactersCharacterIdWalletJournalExecute executes the request
	//  @return []CharactersCharacterIdWalletJournalGetInner
	GetCharactersCharacterIdWalletJournalExecute(r ApiGetCharactersCharacterIdWalletJournalRequest) ([]CharactersCharacterIdWalletJournalGetInner, *http.Response, error)

	/*
	GetCharactersCharacterIdWalletTransactions Get wallet transactions

	Get wallet transactions of a character

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@return ApiGetCharactersCharacterIdWalletTransactionsRequest
	*/
	GetCharactersCharacterIdWalletTransactions(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdWalletTransactionsRequest

	// GetCharactersCharacterIdWalletTransactionsExecute executes the request
	//  @return []CharactersCharacterIdWalletTransactionsGetInner
	GetCharactersCharacterIdWalletTransactionsExecute(r ApiGetCharactersCharacterIdWalletTransactionsRequest) ([]CharactersCharacterIdWalletTransactionsGetInner, *http.Response, error)

	/*
	GetCorporationsCorporationIdWallets Returns a corporation's wallet balance

	Get a corporation's wallets

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param corporationId The ID of the corporation
	@return ApiGetCorporationsCorporationIdWalletsRequest
	*/
	GetCorporationsCorporationIdWallets(ctx context.Context, corporationId int64) ApiGetCorporationsCorporationIdWalletsRequest

	// GetCorporationsCorporationIdWalletsExecute executes the request
	//  @return []CorporationsCorporationIdWalletsGetInner
	GetCorporationsCorporationIdWalletsExecute(r ApiGetCorporationsCorporationIdWalletsRequest) ([]CorporationsCorporationIdWalletsGetInner, *http.Response, error)

	/*
	GetCorporationsCorporationIdWalletsDivisionJournal Get corporation wallet journal

	Retrieve the given corporation's wallet journal for the given division going 30 days back

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param corporationId The ID of the corporation
	@param division
	@return ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest
	*/
	GetCorporationsCorporationIdWalletsDivisionJournal(ctx context.Context, corporationId int64, division int64) ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest

	// GetCorporationsCorporationIdWalletsDivisionJournalExecute executes the request
	//  @return []CorporationsCorporationIdWalletsDivisionJournalGetInner
	GetCorporationsCorporationIdWalletsDivisionJournalExecute(r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) ([]CorporationsCorporationIdWalletsDivisionJournalGetInner, *http.Response, error)

	/*
	GetCorporationsCorporationIdWalletsDivisionTransactions Get corporation wallet transactions

	Get wallet transactions of a corporation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param corporationId The ID of the corporation
	@param division
	@return ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest
	*/
	GetCorporationsCorporationIdWalletsDivisionTransactions(ctx context.Context, corporationId int64, division int64) ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest

	// GetCorporationsCorporationIdWalletsDivisionTransactionsExecute executes the request
	//  @return []CorporationsCorporationIdWalletsDivisionTransactionsGetInner
	GetCorporationsCorporationIdWalletsDivisionTransactionsExecute(r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) ([]CorporationsCorporationIdWalletsDivisionTransactionsGetInner, *http.Response, error)
}

// WalletAPIService WalletAPI service
type WalletAPIService service

type ApiGetCharactersCharacterIdWalletRequest struct {
	ctx context.Context
	ApiService WalletAPI
	characterId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdWalletRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdWalletRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdWalletRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdWalletRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdWalletRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdWalletRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdWalletRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdWalletRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdWalletRequest) Execute() (float64, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdWalletExecute(r)
}

/*
GetCharactersCharacterIdWallet Get a character's wallet balance

Returns a character's wallet balance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @return ApiGetCharactersCharacterIdWalletRequest
*/
func (a *WalletAPIService) GetCharactersCharacterIdWallet(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdWalletRequest {
	return ApiGetCharactersCharacterIdWalletRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
	}
}

// Execute executes the request
//  @return float64
func (a *WalletAPIService) GetCharactersCharacterIdWalletExecute(r ApiGetCharactersCharacterIdWalletRequest) (float64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  float64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.GetCharactersCharacterIdWallet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/wallet"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCharactersCharacterIdWalletJournalRequest struct {
	ctx context.Context
	ApiService WalletAPI
	characterId int64
	xCompatibilityDate *string
	page *int32
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdWalletJournalRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdWalletJournalRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCharactersCharacterIdWalletJournalRequest) Page(page int32) ApiGetCharactersCharacterIdWalletJournalRequest {
	r.page = &page
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdWalletJournalRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdWalletJournalRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdWalletJournalRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdWalletJournalRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdWalletJournalRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdWalletJournalRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdWalletJournalRequest) Execute() ([]CharactersCharacterIdWalletJournalGetInner, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdWalletJournalExecute(r)
}

/*
GetCharactersCharacterIdWalletJournal Get character wallet journal

Retrieve the given character's wallet journal going 30 days back

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @return ApiGetCharactersCharacterIdWalletJournalRequest
*/
func (a *WalletAPIService) GetCharactersCharacterIdWalletJournal(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdWalletJournalRequest {
	return ApiGetCharactersCharacterIdWalletJournalRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdWalletJournalGetInner
func (a *WalletAPIService) GetCharactersCharacterIdWalletJournalExecute(r ApiGetCharactersCharacterIdWalletJournalRequest) ([]CharactersCharacterIdWalletJournalGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdWalletJournalGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.GetCharactersCharacterIdWalletJournal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/wallet/journal"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCharactersCharacterIdWalletTransactionsRequest struct {
	ctx context.Context
	ApiService WalletAPI
	characterId int64
	xCompatibilityDate *string
	fromId *int64
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdWalletTransactionsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdWalletTransactionsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCharactersCharacterIdWalletTransactionsRequest) FromId(fromId int64) ApiGetCharactersCharacterIdWalletTransactionsRequest {
	r.fromId = &fromId
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdWalletTransactionsRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdWalletTransactionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdWalletTransactionsRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdWalletTransactionsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdWalletTransactionsRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdWalletTransactionsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdWalletTransactionsRequest) Execute() ([]CharactersCharacterIdWalletTransactionsGetInner, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdWalletTransactionsExecute(r)
}

/*
GetCharactersCharacterIdWalletTransactions Get wallet transactions

Get wallet transactions of a character

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @return ApiGetCharactersCharacterIdWalletTransactionsRequest
*/
func (a *WalletAPIService) GetCharactersCharacterIdWalletTransactions(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdWalletTransactionsRequest {
	return ApiGetCharactersCharacterIdWalletTransactionsRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdWalletTransactionsGetInner
func (a *WalletAPIService) GetCharactersCharacterIdWalletTransactionsExecute(r ApiGetCharactersCharacterIdWalletTransactionsRequest) ([]CharactersCharacterIdWalletTransactionsGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdWalletTransactionsGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.GetCharactersCharacterIdWalletTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/wallet/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.fromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_id", r.fromId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCorporationsCorporationIdWalletsRequest struct {
	ctx context.Context
	ApiService WalletAPI
	corporationId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCorporationsCorporationIdWalletsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCorporationsCorporationIdWalletsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetCorporationsCorporationIdWalletsRequest) AcceptLanguage(acceptLanguage string) ApiGetCorporationsCorporationIdWalletsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCorporationsCorporationIdWalletsRequest) IfNoneMatch(ifNoneMatch string) ApiGetCorporationsCorporationIdWalletsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCorporationsCorporationIdWalletsRequest) XTenant(xTenant string) ApiGetCorporationsCorporationIdWalletsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCorporationsCorporationIdWalletsRequest) Execute() ([]CorporationsCorporationIdWalletsGetInner, *http.Response, error) {
	return r.ApiService.GetCorporationsCorporationIdWalletsExecute(r)
}

/*
GetCorporationsCorporationIdWallets Returns a corporation's wallet balance

Get a corporation's wallets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param corporationId The ID of the corporation
 @return ApiGetCorporationsCorporationIdWalletsRequest
*/
func (a *WalletAPIService) GetCorporationsCorporationIdWallets(ctx context.Context, corporationId int64) ApiGetCorporationsCorporationIdWalletsRequest {
	return ApiGetCorporationsCorporationIdWalletsRequest{
		ApiService: a,
		ctx: ctx,
		corporationId: corporationId,
	}
}

// Execute executes the request
//  @return []CorporationsCorporationIdWalletsGetInner
func (a *WalletAPIService) GetCorporationsCorporationIdWalletsExecute(r ApiGetCorporationsCorporationIdWalletsRequest) ([]CorporationsCorporationIdWalletsGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CorporationsCorporationIdWalletsGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.GetCorporationsCorporationIdWallets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/corporations/{corporation_id}/wallets"
	localVarPath = strings.Replace(localVarPath, "{"+"corporation_id"+"}", url.PathEscape(parameterValueToString(r.corporationId, "corporationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest struct {
	ctx context.Context
	ApiService WalletAPI
	corporationId int64
	division int64
	xCompatibilityDate *string
	page *int32
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) Page(page int32) ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest {
	r.page = &page
	return r
}

// The language to use for the response.
func (r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) AcceptLanguage(acceptLanguage string) ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) IfNoneMatch(ifNoneMatch string) ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) XTenant(xTenant string) ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) Execute() ([]CorporationsCorporationIdWalletsDivisionJournalGetInner, *http.Response, error) {
	return r.ApiService.GetCorporationsCorporationIdWalletsDivisionJournalExecute(r)
}

/*
GetCorporationsCorporationIdWalletsDivisionJournal Get corporation wallet journal

Retrieve the given corporation's wallet journal for the given division going 30 days back

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param corporationId The ID of the corporation
 @param division
 @return ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest
*/
func (a *WalletAPIService) GetCorporationsCorporationIdWalletsDivisionJournal(ctx context.Context, corporationId int64, division int64) ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest {
	return ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest{
		ApiService: a,
		ctx: ctx,
		corporationId: corporationId,
		division: division,
	}
}

// Execute executes the request
//  @return []CorporationsCorporationIdWalletsDivisionJournalGetInner
func (a *WalletAPIService) GetCorporationsCorporationIdWalletsDivisionJournalExecute(r ApiGetCorporationsCorporationIdWalletsDivisionJournalRequest) ([]CorporationsCorporationIdWalletsDivisionJournalGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CorporationsCorporationIdWalletsDivisionJournalGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.GetCorporationsCorporationIdWalletsDivisionJournal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/corporations/{corporation_id}/wallets/{division}/journal"
	localVarPath = strings.Replace(localVarPath, "{"+"corporation_id"+"}", url.PathEscape(parameterValueToString(r.corporationId, "corporationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"division"+"}", url.PathEscape(parameterValueToString(r.division, "division")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest struct {
	ctx context.Context
	ApiService WalletAPI
	corporationId int64
	division int64
	xCompatibilityDate *string
	fromId *int64
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) FromId(fromId int64) ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest {
	r.fromId = &fromId
	return r
}

// The language to use for the response.
func (r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) AcceptLanguage(acceptLanguage string) ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) IfNoneMatch(ifNoneMatch string) ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) XTenant(xTenant string) ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) Execute() ([]CorporationsCorporationIdWalletsDivisionTransactionsGetInner, *http.Response, error) {
	return r.ApiService.GetCorporationsCorporationIdWalletsDivisionTransactionsExecute(r)
}

/*
GetCorporationsCorporationIdWalletsDivisionTransactions Get corporation wallet transactions

Get wallet transactions of a corporation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param corporationId The ID of the corporation
 @param division
 @return ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest
*/
func (a *WalletAPIService) GetCorporationsCorporationIdWalletsDivisionTransactions(ctx context.Context, corporationId int64, division int64) ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest {
	return ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest{
		ApiService: a,
		ctx: ctx,
		corporationId: corporationId,
		division: division,
	}
}

// Execute executes the request
//  @return []CorporationsCorporationIdWalletsDivisionTransactionsGetInner
func (a *WalletAPIService) GetCorporationsCorporationIdWalletsDivisionTransactionsExecute(r ApiGetCorporationsCorporationIdWalletsDivisionTransactionsRequest) ([]CorporationsCorporationIdWalletsDivisionTransactionsGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CorporationsCorporationIdWalletsDivisionTransactionsGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.GetCorporationsCorporationIdWalletsDivisionTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/corporations/{corporation_id}/wallets/{division}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"corporation_id"+"}", url.PathEscape(parameterValueToString(r.corporationId, "corporationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"division"+"}", url.PathEscape(parameterValueToString(r.division, "division")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.fromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_id", r.fromId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
