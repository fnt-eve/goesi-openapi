/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UniverseTypesTypeIdGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniverseTypesTypeIdGet{}

// UniverseTypesTypeIdGet struct for UniverseTypesTypeIdGet
type UniverseTypesTypeIdGet struct {
	Capacity *float64 `json:"capacity,omitempty"`
	Description string `json:"description"`
	DogmaAttributes []DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner `json:"dogma_attributes,omitempty"`
	DogmaEffects []DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner `json:"dogma_effects,omitempty"`
	GraphicId *int64 `json:"graphic_id,omitempty"`
	GroupId int64 `json:"group_id"`
	IconId *int64 `json:"icon_id,omitempty"`
	// This only exists for types that can be put on the market
	MarketGroupId *int64 `json:"market_group_id,omitempty"`
	Mass *float64 `json:"mass,omitempty"`
	Name string `json:"name"`
	PackagedVolume *float64 `json:"packaged_volume,omitempty"`
	PortionSize *int64 `json:"portion_size,omitempty"`
	Published bool `json:"published"`
	Radius *float64 `json:"radius,omitempty"`
	TypeId int64 `json:"type_id"`
	Volume *float64 `json:"volume,omitempty"`
}

type _UniverseTypesTypeIdGet UniverseTypesTypeIdGet

// NewUniverseTypesTypeIdGet instantiates a new UniverseTypesTypeIdGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseTypesTypeIdGet(description string, groupId int64, name string, published bool, typeId int64) *UniverseTypesTypeIdGet {
	this := UniverseTypesTypeIdGet{}
	this.Description = description
	this.GroupId = groupId
	this.Name = name
	this.Published = published
	this.TypeId = typeId
	return &this
}

// NewUniverseTypesTypeIdGetWithDefaults instantiates a new UniverseTypesTypeIdGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseTypesTypeIdGetWithDefaults() *UniverseTypesTypeIdGet {
	this := UniverseTypesTypeIdGet{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetCapacity() float64 {
	if o == nil || IsNil(o.Capacity) {
		var ret float64
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetCapacityOk() (*float64, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given float64 and assigns it to the Capacity field.
func (o *UniverseTypesTypeIdGet) SetCapacity(v float64) {
	o.Capacity = &v
}

// GetDescription returns the Description field value
func (o *UniverseTypesTypeIdGet) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UniverseTypesTypeIdGet) SetDescription(v string) {
	o.Description = v
}

// GetDogmaAttributes returns the DogmaAttributes field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetDogmaAttributes() []DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner {
	if o == nil || IsNil(o.DogmaAttributes) {
		var ret []DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner
		return ret
	}
	return o.DogmaAttributes
}

// GetDogmaAttributesOk returns a tuple with the DogmaAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetDogmaAttributesOk() ([]DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner, bool) {
	if o == nil || IsNil(o.DogmaAttributes) {
		return nil, false
	}
	return o.DogmaAttributes, true
}

// HasDogmaAttributes returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasDogmaAttributes() bool {
	if o != nil && !IsNil(o.DogmaAttributes) {
		return true
	}

	return false
}

// SetDogmaAttributes gets a reference to the given []DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner and assigns it to the DogmaAttributes field.
func (o *UniverseTypesTypeIdGet) SetDogmaAttributes(v []DogmaDynamicItemsTypeIdItemIdGetDogmaAttributesInner) {
	o.DogmaAttributes = v
}

// GetDogmaEffects returns the DogmaEffects field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetDogmaEffects() []DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner {
	if o == nil || IsNil(o.DogmaEffects) {
		var ret []DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner
		return ret
	}
	return o.DogmaEffects
}

// GetDogmaEffectsOk returns a tuple with the DogmaEffects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetDogmaEffectsOk() ([]DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner, bool) {
	if o == nil || IsNil(o.DogmaEffects) {
		return nil, false
	}
	return o.DogmaEffects, true
}

// HasDogmaEffects returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasDogmaEffects() bool {
	if o != nil && !IsNil(o.DogmaEffects) {
		return true
	}

	return false
}

// SetDogmaEffects gets a reference to the given []DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner and assigns it to the DogmaEffects field.
func (o *UniverseTypesTypeIdGet) SetDogmaEffects(v []DogmaDynamicItemsTypeIdItemIdGetDogmaEffectsInner) {
	o.DogmaEffects = v
}

// GetGraphicId returns the GraphicId field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetGraphicId() int64 {
	if o == nil || IsNil(o.GraphicId) {
		var ret int64
		return ret
	}
	return *o.GraphicId
}

// GetGraphicIdOk returns a tuple with the GraphicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetGraphicIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GraphicId) {
		return nil, false
	}
	return o.GraphicId, true
}

// HasGraphicId returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasGraphicId() bool {
	if o != nil && !IsNil(o.GraphicId) {
		return true
	}

	return false
}

// SetGraphicId gets a reference to the given int64 and assigns it to the GraphicId field.
func (o *UniverseTypesTypeIdGet) SetGraphicId(v int64) {
	o.GraphicId = &v
}

// GetGroupId returns the GroupId field value
func (o *UniverseTypesTypeIdGet) GetGroupId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetGroupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *UniverseTypesTypeIdGet) SetGroupId(v int64) {
	o.GroupId = v
}

// GetIconId returns the IconId field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetIconId() int64 {
	if o == nil || IsNil(o.IconId) {
		var ret int64
		return ret
	}
	return *o.IconId
}

// GetIconIdOk returns a tuple with the IconId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetIconIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IconId) {
		return nil, false
	}
	return o.IconId, true
}

// HasIconId returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasIconId() bool {
	if o != nil && !IsNil(o.IconId) {
		return true
	}

	return false
}

// SetIconId gets a reference to the given int64 and assigns it to the IconId field.
func (o *UniverseTypesTypeIdGet) SetIconId(v int64) {
	o.IconId = &v
}

// GetMarketGroupId returns the MarketGroupId field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetMarketGroupId() int64 {
	if o == nil || IsNil(o.MarketGroupId) {
		var ret int64
		return ret
	}
	return *o.MarketGroupId
}

// GetMarketGroupIdOk returns a tuple with the MarketGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetMarketGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.MarketGroupId) {
		return nil, false
	}
	return o.MarketGroupId, true
}

// HasMarketGroupId returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasMarketGroupId() bool {
	if o != nil && !IsNil(o.MarketGroupId) {
		return true
	}

	return false
}

// SetMarketGroupId gets a reference to the given int64 and assigns it to the MarketGroupId field.
func (o *UniverseTypesTypeIdGet) SetMarketGroupId(v int64) {
	o.MarketGroupId = &v
}

// GetMass returns the Mass field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetMass() float64 {
	if o == nil || IsNil(o.Mass) {
		var ret float64
		return ret
	}
	return *o.Mass
}

// GetMassOk returns a tuple with the Mass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetMassOk() (*float64, bool) {
	if o == nil || IsNil(o.Mass) {
		return nil, false
	}
	return o.Mass, true
}

// HasMass returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasMass() bool {
	if o != nil && !IsNil(o.Mass) {
		return true
	}

	return false
}

// SetMass gets a reference to the given float64 and assigns it to the Mass field.
func (o *UniverseTypesTypeIdGet) SetMass(v float64) {
	o.Mass = &v
}

// GetName returns the Name field value
func (o *UniverseTypesTypeIdGet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UniverseTypesTypeIdGet) SetName(v string) {
	o.Name = v
}

// GetPackagedVolume returns the PackagedVolume field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetPackagedVolume() float64 {
	if o == nil || IsNil(o.PackagedVolume) {
		var ret float64
		return ret
	}
	return *o.PackagedVolume
}

// GetPackagedVolumeOk returns a tuple with the PackagedVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetPackagedVolumeOk() (*float64, bool) {
	if o == nil || IsNil(o.PackagedVolume) {
		return nil, false
	}
	return o.PackagedVolume, true
}

// HasPackagedVolume returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasPackagedVolume() bool {
	if o != nil && !IsNil(o.PackagedVolume) {
		return true
	}

	return false
}

// SetPackagedVolume gets a reference to the given float64 and assigns it to the PackagedVolume field.
func (o *UniverseTypesTypeIdGet) SetPackagedVolume(v float64) {
	o.PackagedVolume = &v
}

// GetPortionSize returns the PortionSize field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetPortionSize() int64 {
	if o == nil || IsNil(o.PortionSize) {
		var ret int64
		return ret
	}
	return *o.PortionSize
}

// GetPortionSizeOk returns a tuple with the PortionSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetPortionSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.PortionSize) {
		return nil, false
	}
	return o.PortionSize, true
}

// HasPortionSize returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasPortionSize() bool {
	if o != nil && !IsNil(o.PortionSize) {
		return true
	}

	return false
}

// SetPortionSize gets a reference to the given int64 and assigns it to the PortionSize field.
func (o *UniverseTypesTypeIdGet) SetPortionSize(v int64) {
	o.PortionSize = &v
}

// GetPublished returns the Published field value
func (o *UniverseTypesTypeIdGet) GetPublished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Published
}

// GetPublishedOk returns a tuple with the Published field value
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetPublishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Published, true
}

// SetPublished sets field value
func (o *UniverseTypesTypeIdGet) SetPublished(v bool) {
	o.Published = v
}

// GetRadius returns the Radius field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetRadius() float64 {
	if o == nil || IsNil(o.Radius) {
		var ret float64
		return ret
	}
	return *o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetRadiusOk() (*float64, bool) {
	if o == nil || IsNil(o.Radius) {
		return nil, false
	}
	return o.Radius, true
}

// HasRadius returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasRadius() bool {
	if o != nil && !IsNil(o.Radius) {
		return true
	}

	return false
}

// SetRadius gets a reference to the given float64 and assigns it to the Radius field.
func (o *UniverseTypesTypeIdGet) SetRadius(v float64) {
	o.Radius = &v
}

// GetTypeId returns the TypeId field value
func (o *UniverseTypesTypeIdGet) GetTypeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetTypeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *UniverseTypesTypeIdGet) SetTypeId(v int64) {
	o.TypeId = v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *UniverseTypesTypeIdGet) GetVolume() float64 {
	if o == nil || IsNil(o.Volume) {
		var ret float64
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseTypesTypeIdGet) GetVolumeOk() (*float64, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *UniverseTypesTypeIdGet) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float64 and assigns it to the Volume field.
func (o *UniverseTypesTypeIdGet) SetVolume(v float64) {
	o.Volume = &v
}

func (o UniverseTypesTypeIdGet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniverseTypesTypeIdGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.DogmaAttributes) {
		toSerialize["dogma_attributes"] = o.DogmaAttributes
	}
	if !IsNil(o.DogmaEffects) {
		toSerialize["dogma_effects"] = o.DogmaEffects
	}
	if !IsNil(o.GraphicId) {
		toSerialize["graphic_id"] = o.GraphicId
	}
	toSerialize["group_id"] = o.GroupId
	if !IsNil(o.IconId) {
		toSerialize["icon_id"] = o.IconId
	}
	if !IsNil(o.MarketGroupId) {
		toSerialize["market_group_id"] = o.MarketGroupId
	}
	if !IsNil(o.Mass) {
		toSerialize["mass"] = o.Mass
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.PackagedVolume) {
		toSerialize["packaged_volume"] = o.PackagedVolume
	}
	if !IsNil(o.PortionSize) {
		toSerialize["portion_size"] = o.PortionSize
	}
	toSerialize["published"] = o.Published
	if !IsNil(o.Radius) {
		toSerialize["radius"] = o.Radius
	}
	toSerialize["type_id"] = o.TypeId
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

func (o *UniverseTypesTypeIdGet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"group_id",
		"name",
		"published",
		"type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUniverseTypesTypeIdGet := _UniverseTypesTypeIdGet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUniverseTypesTypeIdGet)

	if err != nil {
		return err
	}

	*o = UniverseTypesTypeIdGet(varUniverseTypesTypeIdGet)

	return err
}

type NullableUniverseTypesTypeIdGet struct {
	value *UniverseTypesTypeIdGet
	isSet bool
}

func (v NullableUniverseTypesTypeIdGet) Get() *UniverseTypesTypeIdGet {
	return v.value
}

func (v *NullableUniverseTypesTypeIdGet) Set(val *UniverseTypesTypeIdGet) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseTypesTypeIdGet) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseTypesTypeIdGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseTypesTypeIdGet(val *UniverseTypesTypeIdGet) *NullableUniverseTypesTypeIdGet {
	return &NullableUniverseTypesTypeIdGet{value: val, isSet: true}
}

func (v NullableUniverseTypesTypeIdGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseTypesTypeIdGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


