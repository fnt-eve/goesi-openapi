/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CorporationsProjectsDetailReward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorporationsProjectsDetailReward{}

// CorporationsProjectsDetailReward struct for CorporationsProjectsDetailReward
type CorporationsProjectsDetailReward struct {
	// Original amount of ISK that was reserved for this project
	Initial float64 `json:"initial"`
	// Remaining ISK to be awarded
	Remaining float64 `json:"remaining"`
}

type _CorporationsProjectsDetailReward CorporationsProjectsDetailReward

// NewCorporationsProjectsDetailReward instantiates a new CorporationsProjectsDetailReward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporationsProjectsDetailReward(initial float64, remaining float64) *CorporationsProjectsDetailReward {
	this := CorporationsProjectsDetailReward{}
	this.Initial = initial
	this.Remaining = remaining
	return &this
}

// NewCorporationsProjectsDetailRewardWithDefaults instantiates a new CorporationsProjectsDetailReward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporationsProjectsDetailRewardWithDefaults() *CorporationsProjectsDetailReward {
	this := CorporationsProjectsDetailReward{}
	return &this
}

// GetInitial returns the Initial field value
func (o *CorporationsProjectsDetailReward) GetInitial() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Initial
}

// GetInitialOk returns a tuple with the Initial field value
// and a boolean to check if the value has been set.
func (o *CorporationsProjectsDetailReward) GetInitialOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initial, true
}

// SetInitial sets field value
func (o *CorporationsProjectsDetailReward) SetInitial(v float64) {
	o.Initial = v
}

// GetRemaining returns the Remaining field value
func (o *CorporationsProjectsDetailReward) GetRemaining() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value
// and a boolean to check if the value has been set.
func (o *CorporationsProjectsDetailReward) GetRemainingOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remaining, true
}

// SetRemaining sets field value
func (o *CorporationsProjectsDetailReward) SetRemaining(v float64) {
	o.Remaining = v
}

func (o CorporationsProjectsDetailReward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorporationsProjectsDetailReward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["initial"] = o.Initial
	toSerialize["remaining"] = o.Remaining
	return toSerialize, nil
}

func (o *CorporationsProjectsDetailReward) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"initial",
		"remaining",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorporationsProjectsDetailReward := _CorporationsProjectsDetailReward{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorporationsProjectsDetailReward)

	if err != nil {
		return err
	}

	*o = CorporationsProjectsDetailReward(varCorporationsProjectsDetailReward)

	return err
}

type NullableCorporationsProjectsDetailReward struct {
	value *CorporationsProjectsDetailReward
	isSet bool
}

func (v NullableCorporationsProjectsDetailReward) Get() *CorporationsProjectsDetailReward {
	return v.value
}

func (v *NullableCorporationsProjectsDetailReward) Set(val *CorporationsProjectsDetailReward) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailReward) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailReward(val *CorporationsProjectsDetailReward) *NullableCorporationsProjectsDetailReward {
	return &NullableCorporationsProjectsDetailReward{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


