/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner - struct for CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner
type CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner struct {
	StationId *StationId
	StructureId *StructureId
}

// StationIdAsCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner is a convenience function that returns StationId wrapped in CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner
func StationIdAsCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner(v *StationId) CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner {
	return CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner{
		StationId: v,
	}
}

// StructureIdAsCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner is a convenience function that returns StructureId wrapped in CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner
func StructureIdAsCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner(v *StructureId) CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner {
	return CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner{
		StructureId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StationId
	err = newStrictDecoder(data).Decode(&dst.StationId)
	if err == nil {
		jsonStationId, _ := json.Marshal(dst.StationId)
		if string(jsonStationId) == "{}" { // empty struct
			dst.StationId = nil
		} else {
			if err = validator.Validate(dst.StationId); err != nil {
				dst.StationId = nil
			} else {
				match++
			}
		}
	} else {
		dst.StationId = nil
	}

	// try to unmarshal data into StructureId
	err = newStrictDecoder(data).Decode(&dst.StructureId)
	if err == nil {
		jsonStructureId, _ := json.Marshal(dst.StructureId)
		if string(jsonStructureId) == "{}" { // empty struct
			dst.StructureId = nil
		} else {
			if err = validator.Validate(dst.StructureId); err != nil {
				dst.StructureId = nil
			} else {
				match++
			}
		}
	} else {
		dst.StructureId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StationId = nil
		dst.StructureId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) MarshalJSON() ([]byte, error) {
	if src.StationId != nil {
		return json.Marshal(&src.StationId)
	}

	if src.StructureId != nil {
		return json.Marshal(&src.StructureId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.StationId != nil {
		return obj.StationId
	}

	if obj.StructureId != nil {
		return obj.StructureId
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) GetActualInstanceValue() (interface{}) {
	if obj.StationId != nil {
		return *obj.StationId
	}

	if obj.StructureId != nil {
		return *obj.StructureId
	}

	// all schemas are nil
	return nil
}

type NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner struct {
	value *CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner
	isSet bool
}

func (v NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) Get() *CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner {
	return v.value
}

func (v *NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) Set(val *CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner(val *CorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) *NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner {
	return &NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailConfigurationdeliveritemDockingLocationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


