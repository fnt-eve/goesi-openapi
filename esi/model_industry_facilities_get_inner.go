/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IndustryFacilitiesGetInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndustryFacilitiesGetInner{}

// IndustryFacilitiesGetInner struct for IndustryFacilitiesGetInner
type IndustryFacilitiesGetInner struct {
	// ID of the facility
	FacilityId int64 `json:"facility_id"`
	// Owner of the facility
	OwnerId int64 `json:"owner_id"`
	// Region ID where the facility is
	RegionId int64 `json:"region_id"`
	// Solar system ID where the facility is
	SolarSystemId int64 `json:"solar_system_id"`
	// Tax imposed by the facility
	Tax *float64 `json:"tax,omitempty"`
	// Type ID of the facility
	TypeId int64 `json:"type_id"`
}

type _IndustryFacilitiesGetInner IndustryFacilitiesGetInner

// NewIndustryFacilitiesGetInner instantiates a new IndustryFacilitiesGetInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndustryFacilitiesGetInner(facilityId int64, ownerId int64, regionId int64, solarSystemId int64, typeId int64) *IndustryFacilitiesGetInner {
	this := IndustryFacilitiesGetInner{}
	this.FacilityId = facilityId
	this.OwnerId = ownerId
	this.RegionId = regionId
	this.SolarSystemId = solarSystemId
	this.TypeId = typeId
	return &this
}

// NewIndustryFacilitiesGetInnerWithDefaults instantiates a new IndustryFacilitiesGetInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndustryFacilitiesGetInnerWithDefaults() *IndustryFacilitiesGetInner {
	this := IndustryFacilitiesGetInner{}
	return &this
}

// GetFacilityId returns the FacilityId field value
func (o *IndustryFacilitiesGetInner) GetFacilityId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FacilityId
}

// GetFacilityIdOk returns a tuple with the FacilityId field value
// and a boolean to check if the value has been set.
func (o *IndustryFacilitiesGetInner) GetFacilityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FacilityId, true
}

// SetFacilityId sets field value
func (o *IndustryFacilitiesGetInner) SetFacilityId(v int64) {
	o.FacilityId = v
}

// GetOwnerId returns the OwnerId field value
func (o *IndustryFacilitiesGetInner) GetOwnerId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value
// and a boolean to check if the value has been set.
func (o *IndustryFacilitiesGetInner) GetOwnerIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerId, true
}

// SetOwnerId sets field value
func (o *IndustryFacilitiesGetInner) SetOwnerId(v int64) {
	o.OwnerId = v
}

// GetRegionId returns the RegionId field value
func (o *IndustryFacilitiesGetInner) GetRegionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *IndustryFacilitiesGetInner) GetRegionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *IndustryFacilitiesGetInner) SetRegionId(v int64) {
	o.RegionId = v
}

// GetSolarSystemId returns the SolarSystemId field value
func (o *IndustryFacilitiesGetInner) GetSolarSystemId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SolarSystemId
}

// GetSolarSystemIdOk returns a tuple with the SolarSystemId field value
// and a boolean to check if the value has been set.
func (o *IndustryFacilitiesGetInner) GetSolarSystemIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SolarSystemId, true
}

// SetSolarSystemId sets field value
func (o *IndustryFacilitiesGetInner) SetSolarSystemId(v int64) {
	o.SolarSystemId = v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *IndustryFacilitiesGetInner) GetTax() float64 {
	if o == nil || IsNil(o.Tax) {
		var ret float64
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryFacilitiesGetInner) GetTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *IndustryFacilitiesGetInner) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float64 and assigns it to the Tax field.
func (o *IndustryFacilitiesGetInner) SetTax(v float64) {
	o.Tax = &v
}

// GetTypeId returns the TypeId field value
func (o *IndustryFacilitiesGetInner) GetTypeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *IndustryFacilitiesGetInner) GetTypeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *IndustryFacilitiesGetInner) SetTypeId(v int64) {
	o.TypeId = v
}

func (o IndustryFacilitiesGetInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndustryFacilitiesGetInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["facility_id"] = o.FacilityId
	toSerialize["owner_id"] = o.OwnerId
	toSerialize["region_id"] = o.RegionId
	toSerialize["solar_system_id"] = o.SolarSystemId
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	toSerialize["type_id"] = o.TypeId
	return toSerialize, nil
}

func (o *IndustryFacilitiesGetInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"facility_id",
		"owner_id",
		"region_id",
		"solar_system_id",
		"type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndustryFacilitiesGetInner := _IndustryFacilitiesGetInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndustryFacilitiesGetInner)

	if err != nil {
		return err
	}

	*o = IndustryFacilitiesGetInner(varIndustryFacilitiesGetInner)

	return err
}

type NullableIndustryFacilitiesGetInner struct {
	value *IndustryFacilitiesGetInner
	isSet bool
}

func (v NullableIndustryFacilitiesGetInner) Get() *IndustryFacilitiesGetInner {
	return v.value
}

func (v *NullableIndustryFacilitiesGetInner) Set(val *IndustryFacilitiesGetInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryFacilitiesGetInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryFacilitiesGetInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryFacilitiesGetInner(val *IndustryFacilitiesGetInner) *NullableIndustryFacilitiesGetInner {
	return &NullableIndustryFacilitiesGetInner{value: val, isSet: true}
}

func (v NullableIndustryFacilitiesGetInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryFacilitiesGetInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


