/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CorporationsProjectsDetailConfigurationdeliveritemItemsInner - struct for CorporationsProjectsDetailConfigurationdeliveritemItemsInner
type CorporationsProjectsDetailConfigurationdeliveritemItemsInner struct {
	GroupId1 *GroupId1
	TypeId *TypeId
}

// GroupId1AsCorporationsProjectsDetailConfigurationdeliveritemItemsInner is a convenience function that returns GroupId1 wrapped in CorporationsProjectsDetailConfigurationdeliveritemItemsInner
func GroupId1AsCorporationsProjectsDetailConfigurationdeliveritemItemsInner(v *GroupId1) CorporationsProjectsDetailConfigurationdeliveritemItemsInner {
	return CorporationsProjectsDetailConfigurationdeliveritemItemsInner{
		GroupId1: v,
	}
}

// TypeIdAsCorporationsProjectsDetailConfigurationdeliveritemItemsInner is a convenience function that returns TypeId wrapped in CorporationsProjectsDetailConfigurationdeliveritemItemsInner
func TypeIdAsCorporationsProjectsDetailConfigurationdeliveritemItemsInner(v *TypeId) CorporationsProjectsDetailConfigurationdeliveritemItemsInner {
	return CorporationsProjectsDetailConfigurationdeliveritemItemsInner{
		TypeId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CorporationsProjectsDetailConfigurationdeliveritemItemsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GroupId1
	err = newStrictDecoder(data).Decode(&dst.GroupId1)
	if err == nil {
		jsonGroupId1, _ := json.Marshal(dst.GroupId1)
		if string(jsonGroupId1) == "{}" { // empty struct
			dst.GroupId1 = nil
		} else {
			if err = validator.Validate(dst.GroupId1); err != nil {
				dst.GroupId1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GroupId1 = nil
	}

	// try to unmarshal data into TypeId
	err = newStrictDecoder(data).Decode(&dst.TypeId)
	if err == nil {
		jsonTypeId, _ := json.Marshal(dst.TypeId)
		if string(jsonTypeId) == "{}" { // empty struct
			dst.TypeId = nil
		} else {
			if err = validator.Validate(dst.TypeId); err != nil {
				dst.TypeId = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypeId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GroupId1 = nil
		dst.TypeId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CorporationsProjectsDetailConfigurationdeliveritemItemsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CorporationsProjectsDetailConfigurationdeliveritemItemsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CorporationsProjectsDetailConfigurationdeliveritemItemsInner) MarshalJSON() ([]byte, error) {
	if src.GroupId1 != nil {
		return json.Marshal(&src.GroupId1)
	}

	if src.TypeId != nil {
		return json.Marshal(&src.TypeId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CorporationsProjectsDetailConfigurationdeliveritemItemsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GroupId1 != nil {
		return obj.GroupId1
	}

	if obj.TypeId != nil {
		return obj.TypeId
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CorporationsProjectsDetailConfigurationdeliveritemItemsInner) GetActualInstanceValue() (interface{}) {
	if obj.GroupId1 != nil {
		return *obj.GroupId1
	}

	if obj.TypeId != nil {
		return *obj.TypeId
	}

	// all schemas are nil
	return nil
}

type NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner struct {
	value *CorporationsProjectsDetailConfigurationdeliveritemItemsInner
	isSet bool
}

func (v NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner) Get() *CorporationsProjectsDetailConfigurationdeliveritemItemsInner {
	return v.value
}

func (v *NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner) Set(val *CorporationsProjectsDetailConfigurationdeliveritemItemsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner(val *CorporationsProjectsDetailConfigurationdeliveritemItemsInner) *NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner {
	return &NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailConfigurationdeliveritemItemsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


