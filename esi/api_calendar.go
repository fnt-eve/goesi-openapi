/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CalendarAPI interface {

	/*
	GetCharactersCharacterIdCalendar List calendar event summaries

	Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@return ApiGetCharactersCharacterIdCalendarRequest
	*/
	GetCharactersCharacterIdCalendar(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdCalendarRequest

	// GetCharactersCharacterIdCalendarExecute executes the request
	//  @return []CharactersCharacterIdCalendarGetInner
	GetCharactersCharacterIdCalendarExecute(r ApiGetCharactersCharacterIdCalendarRequest) ([]CharactersCharacterIdCalendarGetInner, *http.Response, error)

	/*
	GetCharactersCharacterIdCalendarEventId Get an event

	Get all the information for a specific event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@param eventId
	@return ApiGetCharactersCharacterIdCalendarEventIdRequest
	*/
	GetCharactersCharacterIdCalendarEventId(ctx context.Context, characterId int64, eventId int64) ApiGetCharactersCharacterIdCalendarEventIdRequest

	// GetCharactersCharacterIdCalendarEventIdExecute executes the request
	//  @return CharactersCharacterIdCalendarEventIdGet
	GetCharactersCharacterIdCalendarEventIdExecute(r ApiGetCharactersCharacterIdCalendarEventIdRequest) (*CharactersCharacterIdCalendarEventIdGet, *http.Response, error)

	/*
	GetCharactersCharacterIdCalendarEventIdAttendees Get attendees

	Get all invited attendees for a given event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@param eventId
	@return ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest
	*/
	GetCharactersCharacterIdCalendarEventIdAttendees(ctx context.Context, characterId int64, eventId int64) ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest

	// GetCharactersCharacterIdCalendarEventIdAttendeesExecute executes the request
	//  @return []CharactersCharacterIdCalendarEventIdAttendeesGetInner
	GetCharactersCharacterIdCalendarEventIdAttendeesExecute(r ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest) ([]CharactersCharacterIdCalendarEventIdAttendeesGetInner, *http.Response, error)

	/*
	PutCharactersCharacterIdCalendarEventId Respond to an event

	Set your response status to an event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@param eventId
	@return ApiPutCharactersCharacterIdCalendarEventIdRequest
	*/
	PutCharactersCharacterIdCalendarEventId(ctx context.Context, characterId int64, eventId int64) ApiPutCharactersCharacterIdCalendarEventIdRequest

	// PutCharactersCharacterIdCalendarEventIdExecute executes the request
	PutCharactersCharacterIdCalendarEventIdExecute(r ApiPutCharactersCharacterIdCalendarEventIdRequest) (*http.Response, error)
}

// CalendarAPIService CalendarAPI service
type CalendarAPIService service

type ApiGetCharactersCharacterIdCalendarRequest struct {
	ctx context.Context
	ApiService CalendarAPI
	characterId int64
	xCompatibilityDate *string
	fromEvent *int64
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdCalendarRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdCalendarRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCharactersCharacterIdCalendarRequest) FromEvent(fromEvent int64) ApiGetCharactersCharacterIdCalendarRequest {
	r.fromEvent = &fromEvent
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdCalendarRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdCalendarRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdCalendarRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdCalendarRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdCalendarRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdCalendarRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdCalendarRequest) Execute() ([]CharactersCharacterIdCalendarGetInner, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdCalendarExecute(r)
}

/*
GetCharactersCharacterIdCalendar List calendar event summaries

Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @return ApiGetCharactersCharacterIdCalendarRequest
*/
func (a *CalendarAPIService) GetCharactersCharacterIdCalendar(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdCalendarRequest {
	return ApiGetCharactersCharacterIdCalendarRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdCalendarGetInner
func (a *CalendarAPIService) GetCharactersCharacterIdCalendarExecute(r ApiGetCharactersCharacterIdCalendarRequest) ([]CharactersCharacterIdCalendarGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdCalendarGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarAPIService.GetCharactersCharacterIdCalendar")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/calendar"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		defaultCompatibilityDate := "2020-01-01"
		r.xCompatibilityDate = &defaultCompatibilityDate
	}
	// Removed original error check - now using default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.fromEvent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_event", r.fromEvent, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCharactersCharacterIdCalendarEventIdRequest struct {
	ctx context.Context
	ApiService CalendarAPI
	characterId int64
	eventId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdCalendarEventIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdCalendarEventIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdCalendarEventIdRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdCalendarEventIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdCalendarEventIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdCalendarEventIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdCalendarEventIdRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdCalendarEventIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdCalendarEventIdRequest) Execute() (*CharactersCharacterIdCalendarEventIdGet, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdCalendarEventIdExecute(r)
}

/*
GetCharactersCharacterIdCalendarEventId Get an event

Get all the information for a specific event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @param eventId
 @return ApiGetCharactersCharacterIdCalendarEventIdRequest
*/
func (a *CalendarAPIService) GetCharactersCharacterIdCalendarEventId(ctx context.Context, characterId int64, eventId int64) ApiGetCharactersCharacterIdCalendarEventIdRequest {
	return ApiGetCharactersCharacterIdCalendarEventIdRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return CharactersCharacterIdCalendarEventIdGet
func (a *CalendarAPIService) GetCharactersCharacterIdCalendarEventIdExecute(r ApiGetCharactersCharacterIdCalendarEventIdRequest) (*CharactersCharacterIdCalendarEventIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CharactersCharacterIdCalendarEventIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarAPIService.GetCharactersCharacterIdCalendarEventId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/calendar/{event_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event_id"+"}", url.PathEscape(parameterValueToString(r.eventId, "eventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		defaultCompatibilityDate := "2020-01-01"
		r.xCompatibilityDate = &defaultCompatibilityDate
	}
	// Removed original error check - now using default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest struct {
	ctx context.Context
	ApiService CalendarAPI
	characterId int64
	eventId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest) Execute() ([]CharactersCharacterIdCalendarEventIdAttendeesGetInner, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdCalendarEventIdAttendeesExecute(r)
}

/*
GetCharactersCharacterIdCalendarEventIdAttendees Get attendees

Get all invited attendees for a given event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @param eventId
 @return ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest
*/
func (a *CalendarAPIService) GetCharactersCharacterIdCalendarEventIdAttendees(ctx context.Context, characterId int64, eventId int64) ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest {
	return ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdCalendarEventIdAttendeesGetInner
func (a *CalendarAPIService) GetCharactersCharacterIdCalendarEventIdAttendeesExecute(r ApiGetCharactersCharacterIdCalendarEventIdAttendeesRequest) ([]CharactersCharacterIdCalendarEventIdAttendeesGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdCalendarEventIdAttendeesGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarAPIService.GetCharactersCharacterIdCalendarEventIdAttendees")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/calendar/{event_id}/attendees"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event_id"+"}", url.PathEscape(parameterValueToString(r.eventId, "eventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		defaultCompatibilityDate := "2020-01-01"
		r.xCompatibilityDate = &defaultCompatibilityDate
	}
	// Removed original error check - now using default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCharactersCharacterIdCalendarEventIdRequest struct {
	ctx context.Context
	ApiService CalendarAPI
	characterId int64
	eventId int64
	xCompatibilityDate *string
	putCharactersCharacterIdCalendarEventIdRequest *PutCharactersCharacterIdCalendarEventIdRequest
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiPutCharactersCharacterIdCalendarEventIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiPutCharactersCharacterIdCalendarEventIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiPutCharactersCharacterIdCalendarEventIdRequest) PutCharactersCharacterIdCalendarEventIdRequest(putCharactersCharacterIdCalendarEventIdRequest PutCharactersCharacterIdCalendarEventIdRequest) ApiPutCharactersCharacterIdCalendarEventIdRequest {
	r.putCharactersCharacterIdCalendarEventIdRequest = &putCharactersCharacterIdCalendarEventIdRequest
	return r
}

// The language to use for the response.
func (r ApiPutCharactersCharacterIdCalendarEventIdRequest) AcceptLanguage(acceptLanguage string) ApiPutCharactersCharacterIdCalendarEventIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiPutCharactersCharacterIdCalendarEventIdRequest) IfNoneMatch(ifNoneMatch string) ApiPutCharactersCharacterIdCalendarEventIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiPutCharactersCharacterIdCalendarEventIdRequest) XTenant(xTenant string) ApiPutCharactersCharacterIdCalendarEventIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiPutCharactersCharacterIdCalendarEventIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutCharactersCharacterIdCalendarEventIdExecute(r)
}

/*
PutCharactersCharacterIdCalendarEventId Respond to an event

Set your response status to an event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @param eventId
 @return ApiPutCharactersCharacterIdCalendarEventIdRequest
*/
func (a *CalendarAPIService) PutCharactersCharacterIdCalendarEventId(ctx context.Context, characterId int64, eventId int64) ApiPutCharactersCharacterIdCalendarEventIdRequest {
	return ApiPutCharactersCharacterIdCalendarEventIdRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
		eventId: eventId,
	}
}

// Execute executes the request
func (a *CalendarAPIService) PutCharactersCharacterIdCalendarEventIdExecute(r ApiPutCharactersCharacterIdCalendarEventIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarAPIService.PutCharactersCharacterIdCalendarEventId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/calendar/{event_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event_id"+"}", url.PathEscape(parameterValueToString(r.eventId, "eventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		defaultCompatibilityDate := "2020-01-01"
		r.xCompatibilityDate = &defaultCompatibilityDate
	}
	// Removed original error check - now using default value
	if false {
		return nil, reportError("xCompatibilityDate is required and must be specified")
	}
	if r.putCharactersCharacterIdCalendarEventIdRequest == nil {
		return nil, reportError("putCharactersCharacterIdCalendarEventIdRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	// body params
	localVarPostBody = r.putCharactersCharacterIdCalendarEventIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
