/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CorporationsProjectsDetailConfiguration - Project's configuration
type CorporationsProjectsDetailConfiguration struct {
	CaptureFwComplex *CaptureFwComplex
	DamageShip *DamageShip
	DefendFwComplex *DefendFwComplex
	DeliverItem *DeliverItem
	DestroyNpc *DestroyNpc
	DestroyShip *DestroyShip
	EarnLoyaltyPoint *EarnLoyaltyPoint
	LostShip *LostShip
	Manual *Manual
	ManufactureItem *ManufactureItem
	MineMaterial *MineMaterial
	RemoteBoostShield *RemoteBoostShield
	RemoteRepairArmor *RemoteRepairArmor
	SalvageWreck *SalvageWreck
	ScanSignature *ScanSignature
	ShipInsurance *ShipInsurance
	Unknown *Unknown
}

// CaptureFwComplexAsCorporationsProjectsDetailConfiguration is a convenience function that returns CaptureFwComplex wrapped in CorporationsProjectsDetailConfiguration
func CaptureFwComplexAsCorporationsProjectsDetailConfiguration(v *CaptureFwComplex) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		CaptureFwComplex: v,
	}
}

// DamageShipAsCorporationsProjectsDetailConfiguration is a convenience function that returns DamageShip wrapped in CorporationsProjectsDetailConfiguration
func DamageShipAsCorporationsProjectsDetailConfiguration(v *DamageShip) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		DamageShip: v,
	}
}

// DefendFwComplexAsCorporationsProjectsDetailConfiguration is a convenience function that returns DefendFwComplex wrapped in CorporationsProjectsDetailConfiguration
func DefendFwComplexAsCorporationsProjectsDetailConfiguration(v *DefendFwComplex) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		DefendFwComplex: v,
	}
}

// DeliverItemAsCorporationsProjectsDetailConfiguration is a convenience function that returns DeliverItem wrapped in CorporationsProjectsDetailConfiguration
func DeliverItemAsCorporationsProjectsDetailConfiguration(v *DeliverItem) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		DeliverItem: v,
	}
}

// DestroyNpcAsCorporationsProjectsDetailConfiguration is a convenience function that returns DestroyNpc wrapped in CorporationsProjectsDetailConfiguration
func DestroyNpcAsCorporationsProjectsDetailConfiguration(v *DestroyNpc) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		DestroyNpc: v,
	}
}

// DestroyShipAsCorporationsProjectsDetailConfiguration is a convenience function that returns DestroyShip wrapped in CorporationsProjectsDetailConfiguration
func DestroyShipAsCorporationsProjectsDetailConfiguration(v *DestroyShip) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		DestroyShip: v,
	}
}

// EarnLoyaltyPointAsCorporationsProjectsDetailConfiguration is a convenience function that returns EarnLoyaltyPoint wrapped in CorporationsProjectsDetailConfiguration
func EarnLoyaltyPointAsCorporationsProjectsDetailConfiguration(v *EarnLoyaltyPoint) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		EarnLoyaltyPoint: v,
	}
}

// LostShipAsCorporationsProjectsDetailConfiguration is a convenience function that returns LostShip wrapped in CorporationsProjectsDetailConfiguration
func LostShipAsCorporationsProjectsDetailConfiguration(v *LostShip) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		LostShip: v,
	}
}

// ManualAsCorporationsProjectsDetailConfiguration is a convenience function that returns Manual wrapped in CorporationsProjectsDetailConfiguration
func ManualAsCorporationsProjectsDetailConfiguration(v *Manual) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		Manual: v,
	}
}

// ManufactureItemAsCorporationsProjectsDetailConfiguration is a convenience function that returns ManufactureItem wrapped in CorporationsProjectsDetailConfiguration
func ManufactureItemAsCorporationsProjectsDetailConfiguration(v *ManufactureItem) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		ManufactureItem: v,
	}
}

// MineMaterialAsCorporationsProjectsDetailConfiguration is a convenience function that returns MineMaterial wrapped in CorporationsProjectsDetailConfiguration
func MineMaterialAsCorporationsProjectsDetailConfiguration(v *MineMaterial) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		MineMaterial: v,
	}
}

// RemoteBoostShieldAsCorporationsProjectsDetailConfiguration is a convenience function that returns RemoteBoostShield wrapped in CorporationsProjectsDetailConfiguration
func RemoteBoostShieldAsCorporationsProjectsDetailConfiguration(v *RemoteBoostShield) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		RemoteBoostShield: v,
	}
}

// RemoteRepairArmorAsCorporationsProjectsDetailConfiguration is a convenience function that returns RemoteRepairArmor wrapped in CorporationsProjectsDetailConfiguration
func RemoteRepairArmorAsCorporationsProjectsDetailConfiguration(v *RemoteRepairArmor) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		RemoteRepairArmor: v,
	}
}

// SalvageWreckAsCorporationsProjectsDetailConfiguration is a convenience function that returns SalvageWreck wrapped in CorporationsProjectsDetailConfiguration
func SalvageWreckAsCorporationsProjectsDetailConfiguration(v *SalvageWreck) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		SalvageWreck: v,
	}
}

// ScanSignatureAsCorporationsProjectsDetailConfiguration is a convenience function that returns ScanSignature wrapped in CorporationsProjectsDetailConfiguration
func ScanSignatureAsCorporationsProjectsDetailConfiguration(v *ScanSignature) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		ScanSignature: v,
	}
}

// ShipInsuranceAsCorporationsProjectsDetailConfiguration is a convenience function that returns ShipInsurance wrapped in CorporationsProjectsDetailConfiguration
func ShipInsuranceAsCorporationsProjectsDetailConfiguration(v *ShipInsurance) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		ShipInsurance: v,
	}
}

// UnknownAsCorporationsProjectsDetailConfiguration is a convenience function that returns Unknown wrapped in CorporationsProjectsDetailConfiguration
func UnknownAsCorporationsProjectsDetailConfiguration(v *Unknown) CorporationsProjectsDetailConfiguration {
	return CorporationsProjectsDetailConfiguration{
		Unknown: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CorporationsProjectsDetailConfiguration) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CaptureFwComplex
	err = newStrictDecoder(data).Decode(&dst.CaptureFwComplex)
	if err == nil {
		jsonCaptureFwComplex, _ := json.Marshal(dst.CaptureFwComplex)
		if string(jsonCaptureFwComplex) == "{}" { // empty struct
			dst.CaptureFwComplex = nil
		} else {
			if err = validator.Validate(dst.CaptureFwComplex); err != nil {
				dst.CaptureFwComplex = nil
			} else {
				match++
			}
		}
	} else {
		dst.CaptureFwComplex = nil
	}

	// try to unmarshal data into DamageShip
	err = newStrictDecoder(data).Decode(&dst.DamageShip)
	if err == nil {
		jsonDamageShip, _ := json.Marshal(dst.DamageShip)
		if string(jsonDamageShip) == "{}" { // empty struct
			dst.DamageShip = nil
		} else {
			if err = validator.Validate(dst.DamageShip); err != nil {
				dst.DamageShip = nil
			} else {
				match++
			}
		}
	} else {
		dst.DamageShip = nil
	}

	// try to unmarshal data into DefendFwComplex
	err = newStrictDecoder(data).Decode(&dst.DefendFwComplex)
	if err == nil {
		jsonDefendFwComplex, _ := json.Marshal(dst.DefendFwComplex)
		if string(jsonDefendFwComplex) == "{}" { // empty struct
			dst.DefendFwComplex = nil
		} else {
			if err = validator.Validate(dst.DefendFwComplex); err != nil {
				dst.DefendFwComplex = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefendFwComplex = nil
	}

	// try to unmarshal data into DeliverItem
	err = newStrictDecoder(data).Decode(&dst.DeliverItem)
	if err == nil {
		jsonDeliverItem, _ := json.Marshal(dst.DeliverItem)
		if string(jsonDeliverItem) == "{}" { // empty struct
			dst.DeliverItem = nil
		} else {
			if err = validator.Validate(dst.DeliverItem); err != nil {
				dst.DeliverItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeliverItem = nil
	}

	// try to unmarshal data into DestroyNpc
	err = newStrictDecoder(data).Decode(&dst.DestroyNpc)
	if err == nil {
		jsonDestroyNpc, _ := json.Marshal(dst.DestroyNpc)
		if string(jsonDestroyNpc) == "{}" { // empty struct
			dst.DestroyNpc = nil
		} else {
			if err = validator.Validate(dst.DestroyNpc); err != nil {
				dst.DestroyNpc = nil
			} else {
				match++
			}
		}
	} else {
		dst.DestroyNpc = nil
	}

	// try to unmarshal data into DestroyShip
	err = newStrictDecoder(data).Decode(&dst.DestroyShip)
	if err == nil {
		jsonDestroyShip, _ := json.Marshal(dst.DestroyShip)
		if string(jsonDestroyShip) == "{}" { // empty struct
			dst.DestroyShip = nil
		} else {
			if err = validator.Validate(dst.DestroyShip); err != nil {
				dst.DestroyShip = nil
			} else {
				match++
			}
		}
	} else {
		dst.DestroyShip = nil
	}

	// try to unmarshal data into EarnLoyaltyPoint
	err = newStrictDecoder(data).Decode(&dst.EarnLoyaltyPoint)
	if err == nil {
		jsonEarnLoyaltyPoint, _ := json.Marshal(dst.EarnLoyaltyPoint)
		if string(jsonEarnLoyaltyPoint) == "{}" { // empty struct
			dst.EarnLoyaltyPoint = nil
		} else {
			if err = validator.Validate(dst.EarnLoyaltyPoint); err != nil {
				dst.EarnLoyaltyPoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.EarnLoyaltyPoint = nil
	}

	// try to unmarshal data into LostShip
	err = newStrictDecoder(data).Decode(&dst.LostShip)
	if err == nil {
		jsonLostShip, _ := json.Marshal(dst.LostShip)
		if string(jsonLostShip) == "{}" { // empty struct
			dst.LostShip = nil
		} else {
			if err = validator.Validate(dst.LostShip); err != nil {
				dst.LostShip = nil
			} else {
				match++
			}
		}
	} else {
		dst.LostShip = nil
	}

	// try to unmarshal data into Manual
	err = newStrictDecoder(data).Decode(&dst.Manual)
	if err == nil {
		jsonManual, _ := json.Marshal(dst.Manual)
		if string(jsonManual) == "{}" { // empty struct
			dst.Manual = nil
		} else {
			if err = validator.Validate(dst.Manual); err != nil {
				dst.Manual = nil
			} else {
				match++
			}
		}
	} else {
		dst.Manual = nil
	}

	// try to unmarshal data into ManufactureItem
	err = newStrictDecoder(data).Decode(&dst.ManufactureItem)
	if err == nil {
		jsonManufactureItem, _ := json.Marshal(dst.ManufactureItem)
		if string(jsonManufactureItem) == "{}" { // empty struct
			dst.ManufactureItem = nil
		} else {
			if err = validator.Validate(dst.ManufactureItem); err != nil {
				dst.ManufactureItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManufactureItem = nil
	}

	// try to unmarshal data into MineMaterial
	err = newStrictDecoder(data).Decode(&dst.MineMaterial)
	if err == nil {
		jsonMineMaterial, _ := json.Marshal(dst.MineMaterial)
		if string(jsonMineMaterial) == "{}" { // empty struct
			dst.MineMaterial = nil
		} else {
			if err = validator.Validate(dst.MineMaterial); err != nil {
				dst.MineMaterial = nil
			} else {
				match++
			}
		}
	} else {
		dst.MineMaterial = nil
	}

	// try to unmarshal data into RemoteBoostShield
	err = newStrictDecoder(data).Decode(&dst.RemoteBoostShield)
	if err == nil {
		jsonRemoteBoostShield, _ := json.Marshal(dst.RemoteBoostShield)
		if string(jsonRemoteBoostShield) == "{}" { // empty struct
			dst.RemoteBoostShield = nil
		} else {
			if err = validator.Validate(dst.RemoteBoostShield); err != nil {
				dst.RemoteBoostShield = nil
			} else {
				match++
			}
		}
	} else {
		dst.RemoteBoostShield = nil
	}

	// try to unmarshal data into RemoteRepairArmor
	err = newStrictDecoder(data).Decode(&dst.RemoteRepairArmor)
	if err == nil {
		jsonRemoteRepairArmor, _ := json.Marshal(dst.RemoteRepairArmor)
		if string(jsonRemoteRepairArmor) == "{}" { // empty struct
			dst.RemoteRepairArmor = nil
		} else {
			if err = validator.Validate(dst.RemoteRepairArmor); err != nil {
				dst.RemoteRepairArmor = nil
			} else {
				match++
			}
		}
	} else {
		dst.RemoteRepairArmor = nil
	}

	// try to unmarshal data into SalvageWreck
	err = newStrictDecoder(data).Decode(&dst.SalvageWreck)
	if err == nil {
		jsonSalvageWreck, _ := json.Marshal(dst.SalvageWreck)
		if string(jsonSalvageWreck) == "{}" { // empty struct
			dst.SalvageWreck = nil
		} else {
			if err = validator.Validate(dst.SalvageWreck); err != nil {
				dst.SalvageWreck = nil
			} else {
				match++
			}
		}
	} else {
		dst.SalvageWreck = nil
	}

	// try to unmarshal data into ScanSignature
	err = newStrictDecoder(data).Decode(&dst.ScanSignature)
	if err == nil {
		jsonScanSignature, _ := json.Marshal(dst.ScanSignature)
		if string(jsonScanSignature) == "{}" { // empty struct
			dst.ScanSignature = nil
		} else {
			if err = validator.Validate(dst.ScanSignature); err != nil {
				dst.ScanSignature = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScanSignature = nil
	}

	// try to unmarshal data into ShipInsurance
	err = newStrictDecoder(data).Decode(&dst.ShipInsurance)
	if err == nil {
		jsonShipInsurance, _ := json.Marshal(dst.ShipInsurance)
		if string(jsonShipInsurance) == "{}" { // empty struct
			dst.ShipInsurance = nil
		} else {
			if err = validator.Validate(dst.ShipInsurance); err != nil {
				dst.ShipInsurance = nil
			} else {
				match++
			}
		}
	} else {
		dst.ShipInsurance = nil
	}

	// try to unmarshal data into Unknown
	err = newStrictDecoder(data).Decode(&dst.Unknown)
	if err == nil {
		jsonUnknown, _ := json.Marshal(dst.Unknown)
		if string(jsonUnknown) == "{}" { // empty struct
			dst.Unknown = nil
		} else {
			if err = validator.Validate(dst.Unknown); err != nil {
				dst.Unknown = nil
			} else {
				match++
			}
		}
	} else {
		dst.Unknown = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CaptureFwComplex = nil
		dst.DamageShip = nil
		dst.DefendFwComplex = nil
		dst.DeliverItem = nil
		dst.DestroyNpc = nil
		dst.DestroyShip = nil
		dst.EarnLoyaltyPoint = nil
		dst.LostShip = nil
		dst.Manual = nil
		dst.ManufactureItem = nil
		dst.MineMaterial = nil
		dst.RemoteBoostShield = nil
		dst.RemoteRepairArmor = nil
		dst.SalvageWreck = nil
		dst.ScanSignature = nil
		dst.ShipInsurance = nil
		dst.Unknown = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CorporationsProjectsDetailConfiguration)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CorporationsProjectsDetailConfiguration)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CorporationsProjectsDetailConfiguration) MarshalJSON() ([]byte, error) {
	if src.CaptureFwComplex != nil {
		return json.Marshal(&src.CaptureFwComplex)
	}

	if src.DamageShip != nil {
		return json.Marshal(&src.DamageShip)
	}

	if src.DefendFwComplex != nil {
		return json.Marshal(&src.DefendFwComplex)
	}

	if src.DeliverItem != nil {
		return json.Marshal(&src.DeliverItem)
	}

	if src.DestroyNpc != nil {
		return json.Marshal(&src.DestroyNpc)
	}

	if src.DestroyShip != nil {
		return json.Marshal(&src.DestroyShip)
	}

	if src.EarnLoyaltyPoint != nil {
		return json.Marshal(&src.EarnLoyaltyPoint)
	}

	if src.LostShip != nil {
		return json.Marshal(&src.LostShip)
	}

	if src.Manual != nil {
		return json.Marshal(&src.Manual)
	}

	if src.ManufactureItem != nil {
		return json.Marshal(&src.ManufactureItem)
	}

	if src.MineMaterial != nil {
		return json.Marshal(&src.MineMaterial)
	}

	if src.RemoteBoostShield != nil {
		return json.Marshal(&src.RemoteBoostShield)
	}

	if src.RemoteRepairArmor != nil {
		return json.Marshal(&src.RemoteRepairArmor)
	}

	if src.SalvageWreck != nil {
		return json.Marshal(&src.SalvageWreck)
	}

	if src.ScanSignature != nil {
		return json.Marshal(&src.ScanSignature)
	}

	if src.ShipInsurance != nil {
		return json.Marshal(&src.ShipInsurance)
	}

	if src.Unknown != nil {
		return json.Marshal(&src.Unknown)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CorporationsProjectsDetailConfiguration) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CaptureFwComplex != nil {
		return obj.CaptureFwComplex
	}

	if obj.DamageShip != nil {
		return obj.DamageShip
	}

	if obj.DefendFwComplex != nil {
		return obj.DefendFwComplex
	}

	if obj.DeliverItem != nil {
		return obj.DeliverItem
	}

	if obj.DestroyNpc != nil {
		return obj.DestroyNpc
	}

	if obj.DestroyShip != nil {
		return obj.DestroyShip
	}

	if obj.EarnLoyaltyPoint != nil {
		return obj.EarnLoyaltyPoint
	}

	if obj.LostShip != nil {
		return obj.LostShip
	}

	if obj.Manual != nil {
		return obj.Manual
	}

	if obj.ManufactureItem != nil {
		return obj.ManufactureItem
	}

	if obj.MineMaterial != nil {
		return obj.MineMaterial
	}

	if obj.RemoteBoostShield != nil {
		return obj.RemoteBoostShield
	}

	if obj.RemoteRepairArmor != nil {
		return obj.RemoteRepairArmor
	}

	if obj.SalvageWreck != nil {
		return obj.SalvageWreck
	}

	if obj.ScanSignature != nil {
		return obj.ScanSignature
	}

	if obj.ShipInsurance != nil {
		return obj.ShipInsurance
	}

	if obj.Unknown != nil {
		return obj.Unknown
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CorporationsProjectsDetailConfiguration) GetActualInstanceValue() (interface{}) {
	if obj.CaptureFwComplex != nil {
		return *obj.CaptureFwComplex
	}

	if obj.DamageShip != nil {
		return *obj.DamageShip
	}

	if obj.DefendFwComplex != nil {
		return *obj.DefendFwComplex
	}

	if obj.DeliverItem != nil {
		return *obj.DeliverItem
	}

	if obj.DestroyNpc != nil {
		return *obj.DestroyNpc
	}

	if obj.DestroyShip != nil {
		return *obj.DestroyShip
	}

	if obj.EarnLoyaltyPoint != nil {
		return *obj.EarnLoyaltyPoint
	}

	if obj.LostShip != nil {
		return *obj.LostShip
	}

	if obj.Manual != nil {
		return *obj.Manual
	}

	if obj.ManufactureItem != nil {
		return *obj.ManufactureItem
	}

	if obj.MineMaterial != nil {
		return *obj.MineMaterial
	}

	if obj.RemoteBoostShield != nil {
		return *obj.RemoteBoostShield
	}

	if obj.RemoteRepairArmor != nil {
		return *obj.RemoteRepairArmor
	}

	if obj.SalvageWreck != nil {
		return *obj.SalvageWreck
	}

	if obj.ScanSignature != nil {
		return *obj.ScanSignature
	}

	if obj.ShipInsurance != nil {
		return *obj.ShipInsurance
	}

	if obj.Unknown != nil {
		return *obj.Unknown
	}

	// all schemas are nil
	return nil
}

type NullableCorporationsProjectsDetailConfiguration struct {
	value *CorporationsProjectsDetailConfiguration
	isSet bool
}

func (v NullableCorporationsProjectsDetailConfiguration) Get() *CorporationsProjectsDetailConfiguration {
	return v.value
}

func (v *NullableCorporationsProjectsDetailConfiguration) Set(val *CorporationsProjectsDetailConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailConfiguration(val *CorporationsProjectsDetailConfiguration) *NullableCorporationsProjectsDetailConfiguration {
	return &NullableCorporationsProjectsDetailConfiguration{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


