/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type DogmaAPI interface {

	/*
	GetDogmaAttributes Get attributes

	Get a list of dogma attribute ids

This route expires daily at 11:05

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDogmaAttributesRequest
	*/
	GetDogmaAttributes(ctx context.Context) ApiGetDogmaAttributesRequest

	// GetDogmaAttributesExecute executes the request
	//  @return []int64
	GetDogmaAttributesExecute(r ApiGetDogmaAttributesRequest) ([]int64, *http.Response, error)

	/*
	GetDogmaAttributesAttributeId Get attribute information

	Get information on a dogma attribute

This route expires daily at 11:05

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attributeId
	@return ApiGetDogmaAttributesAttributeIdRequest
	*/
	GetDogmaAttributesAttributeId(ctx context.Context, attributeId int64) ApiGetDogmaAttributesAttributeIdRequest

	// GetDogmaAttributesAttributeIdExecute executes the request
	//  @return DogmaAttributesAttributeIdGet
	GetDogmaAttributesAttributeIdExecute(r ApiGetDogmaAttributesAttributeIdRequest) (*DogmaAttributesAttributeIdGet, *http.Response, error)

	/*
	GetDogmaDynamicItemsTypeIdItemId Get dynamic item information

	Returns info about a dynamic item resulting from mutation with a mutaplasmid.

This route expires daily at 11:05

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId
	@param typeId
	@return ApiGetDogmaDynamicItemsTypeIdItemIdRequest
	*/
	GetDogmaDynamicItemsTypeIdItemId(ctx context.Context, itemId int64, typeId int64) ApiGetDogmaDynamicItemsTypeIdItemIdRequest

	// GetDogmaDynamicItemsTypeIdItemIdExecute executes the request
	//  @return DogmaDynamicItemsTypeIdItemIdGet
	GetDogmaDynamicItemsTypeIdItemIdExecute(r ApiGetDogmaDynamicItemsTypeIdItemIdRequest) (*DogmaDynamicItemsTypeIdItemIdGet, *http.Response, error)

	/*
	GetDogmaEffects Get effects

	Get a list of dogma effect ids

This route expires daily at 11:05

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDogmaEffectsRequest
	*/
	GetDogmaEffects(ctx context.Context) ApiGetDogmaEffectsRequest

	// GetDogmaEffectsExecute executes the request
	//  @return []int64
	GetDogmaEffectsExecute(r ApiGetDogmaEffectsRequest) ([]int64, *http.Response, error)

	/*
	GetDogmaEffectsEffectId Get effect information

	Get information on a dogma effect

This route expires daily at 11:05

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param effectId
	@return ApiGetDogmaEffectsEffectIdRequest
	*/
	GetDogmaEffectsEffectId(ctx context.Context, effectId int64) ApiGetDogmaEffectsEffectIdRequest

	// GetDogmaEffectsEffectIdExecute executes the request
	//  @return DogmaEffectsEffectIdGet
	GetDogmaEffectsEffectIdExecute(r ApiGetDogmaEffectsEffectIdRequest) (*DogmaEffectsEffectIdGet, *http.Response, error)
}

// DogmaAPIService DogmaAPI service
type DogmaAPIService service

type ApiGetDogmaAttributesRequest struct {
	ctx context.Context
	ApiService DogmaAPI
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetDogmaAttributesRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetDogmaAttributesRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetDogmaAttributesRequest) AcceptLanguage(acceptLanguage string) ApiGetDogmaAttributesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetDogmaAttributesRequest) IfNoneMatch(ifNoneMatch string) ApiGetDogmaAttributesRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetDogmaAttributesRequest) XTenant(xTenant string) ApiGetDogmaAttributesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetDogmaAttributesRequest) Execute() ([]int64, *http.Response, error) {
	return r.ApiService.GetDogmaAttributesExecute(r)
}

/*
GetDogmaAttributes Get attributes

Get a list of dogma attribute ids

This route expires daily at 11:05

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDogmaAttributesRequest
*/
func (a *DogmaAPIService) GetDogmaAttributes(ctx context.Context) ApiGetDogmaAttributesRequest {
	return ApiGetDogmaAttributesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []int64
func (a *DogmaAPIService) GetDogmaAttributesExecute(r ApiGetDogmaAttributesRequest) ([]int64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DogmaAPIService.GetDogmaAttributes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dogma/attributes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDogmaAttributesAttributeIdRequest struct {
	ctx context.Context
	ApiService DogmaAPI
	attributeId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetDogmaAttributesAttributeIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetDogmaAttributesAttributeIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetDogmaAttributesAttributeIdRequest) AcceptLanguage(acceptLanguage string) ApiGetDogmaAttributesAttributeIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetDogmaAttributesAttributeIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetDogmaAttributesAttributeIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetDogmaAttributesAttributeIdRequest) XTenant(xTenant string) ApiGetDogmaAttributesAttributeIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetDogmaAttributesAttributeIdRequest) Execute() (*DogmaAttributesAttributeIdGet, *http.Response, error) {
	return r.ApiService.GetDogmaAttributesAttributeIdExecute(r)
}

/*
GetDogmaAttributesAttributeId Get attribute information

Get information on a dogma attribute

This route expires daily at 11:05

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param attributeId
 @return ApiGetDogmaAttributesAttributeIdRequest
*/
func (a *DogmaAPIService) GetDogmaAttributesAttributeId(ctx context.Context, attributeId int64) ApiGetDogmaAttributesAttributeIdRequest {
	return ApiGetDogmaAttributesAttributeIdRequest{
		ApiService: a,
		ctx: ctx,
		attributeId: attributeId,
	}
}

// Execute executes the request
//  @return DogmaAttributesAttributeIdGet
func (a *DogmaAPIService) GetDogmaAttributesAttributeIdExecute(r ApiGetDogmaAttributesAttributeIdRequest) (*DogmaAttributesAttributeIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DogmaAttributesAttributeIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DogmaAPIService.GetDogmaAttributesAttributeId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dogma/attributes/{attribute_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"attribute_id"+"}", url.PathEscape(parameterValueToString(r.attributeId, "attributeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDogmaDynamicItemsTypeIdItemIdRequest struct {
	ctx context.Context
	ApiService DogmaAPI
	itemId int64
	typeId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetDogmaDynamicItemsTypeIdItemIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetDogmaDynamicItemsTypeIdItemIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetDogmaDynamicItemsTypeIdItemIdRequest) AcceptLanguage(acceptLanguage string) ApiGetDogmaDynamicItemsTypeIdItemIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetDogmaDynamicItemsTypeIdItemIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetDogmaDynamicItemsTypeIdItemIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetDogmaDynamicItemsTypeIdItemIdRequest) XTenant(xTenant string) ApiGetDogmaDynamicItemsTypeIdItemIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetDogmaDynamicItemsTypeIdItemIdRequest) Execute() (*DogmaDynamicItemsTypeIdItemIdGet, *http.Response, error) {
	return r.ApiService.GetDogmaDynamicItemsTypeIdItemIdExecute(r)
}

/*
GetDogmaDynamicItemsTypeIdItemId Get dynamic item information

Returns info about a dynamic item resulting from mutation with a mutaplasmid.

This route expires daily at 11:05

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId
 @param typeId
 @return ApiGetDogmaDynamicItemsTypeIdItemIdRequest
*/
func (a *DogmaAPIService) GetDogmaDynamicItemsTypeIdItemId(ctx context.Context, itemId int64, typeId int64) ApiGetDogmaDynamicItemsTypeIdItemIdRequest {
	return ApiGetDogmaDynamicItemsTypeIdItemIdRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		typeId: typeId,
	}
}

// Execute executes the request
//  @return DogmaDynamicItemsTypeIdItemIdGet
func (a *DogmaAPIService) GetDogmaDynamicItemsTypeIdItemIdExecute(r ApiGetDogmaDynamicItemsTypeIdItemIdRequest) (*DogmaDynamicItemsTypeIdItemIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DogmaDynamicItemsTypeIdItemIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DogmaAPIService.GetDogmaDynamicItemsTypeIdItemId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dogma/dynamic/items/{type_id}/{item_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"item_id"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"type_id"+"}", url.PathEscape(parameterValueToString(r.typeId, "typeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDogmaEffectsRequest struct {
	ctx context.Context
	ApiService DogmaAPI
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetDogmaEffectsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetDogmaEffectsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetDogmaEffectsRequest) AcceptLanguage(acceptLanguage string) ApiGetDogmaEffectsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetDogmaEffectsRequest) IfNoneMatch(ifNoneMatch string) ApiGetDogmaEffectsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetDogmaEffectsRequest) XTenant(xTenant string) ApiGetDogmaEffectsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetDogmaEffectsRequest) Execute() ([]int64, *http.Response, error) {
	return r.ApiService.GetDogmaEffectsExecute(r)
}

/*
GetDogmaEffects Get effects

Get a list of dogma effect ids

This route expires daily at 11:05

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDogmaEffectsRequest
*/
func (a *DogmaAPIService) GetDogmaEffects(ctx context.Context) ApiGetDogmaEffectsRequest {
	return ApiGetDogmaEffectsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []int64
func (a *DogmaAPIService) GetDogmaEffectsExecute(r ApiGetDogmaEffectsRequest) ([]int64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DogmaAPIService.GetDogmaEffects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dogma/effects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDogmaEffectsEffectIdRequest struct {
	ctx context.Context
	ApiService DogmaAPI
	effectId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetDogmaEffectsEffectIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetDogmaEffectsEffectIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetDogmaEffectsEffectIdRequest) AcceptLanguage(acceptLanguage string) ApiGetDogmaEffectsEffectIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetDogmaEffectsEffectIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetDogmaEffectsEffectIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetDogmaEffectsEffectIdRequest) XTenant(xTenant string) ApiGetDogmaEffectsEffectIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetDogmaEffectsEffectIdRequest) Execute() (*DogmaEffectsEffectIdGet, *http.Response, error) {
	return r.ApiService.GetDogmaEffectsEffectIdExecute(r)
}

/*
GetDogmaEffectsEffectId Get effect information

Get information on a dogma effect

This route expires daily at 11:05

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param effectId
 @return ApiGetDogmaEffectsEffectIdRequest
*/
func (a *DogmaAPIService) GetDogmaEffectsEffectId(ctx context.Context, effectId int64) ApiGetDogmaEffectsEffectIdRequest {
	return ApiGetDogmaEffectsEffectIdRequest{
		ApiService: a,
		ctx: ctx,
		effectId: effectId,
	}
}

// Execute executes the request
//  @return DogmaEffectsEffectIdGet
func (a *DogmaAPIService) GetDogmaEffectsEffectIdExecute(r ApiGetDogmaEffectsEffectIdRequest) (*DogmaEffectsEffectIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DogmaEffectsEffectIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DogmaAPIService.GetDogmaEffectsEffectId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dogma/effects/{effect_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"effect_id"+"}", url.PathEscape(parameterValueToString(r.effectId, "effectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
