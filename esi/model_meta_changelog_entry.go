/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetaChangelogEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaChangelogEntry{}

// MetaChangelogEntry struct for MetaChangelogEntry
type MetaChangelogEntry struct {
	CompatibilityDate string `json:"compatibility_date"`
	// Description
	Description string `json:"description"`
	// Whether this is a breaking change
	IsBreaking bool `json:"is_breaking"`
	// HTTP method of the route
	Method string `json:"method"`
	// Path of the route
	Path string `json:"path"`
}

type _MetaChangelogEntry MetaChangelogEntry

// NewMetaChangelogEntry instantiates a new MetaChangelogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaChangelogEntry(compatibilityDate string, description string, isBreaking bool, method string, path string) *MetaChangelogEntry {
	this := MetaChangelogEntry{}
	this.CompatibilityDate = compatibilityDate
	this.Description = description
	this.IsBreaking = isBreaking
	this.Method = method
	this.Path = path
	return &this
}

// NewMetaChangelogEntryWithDefaults instantiates a new MetaChangelogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaChangelogEntryWithDefaults() *MetaChangelogEntry {
	this := MetaChangelogEntry{}
	return &this
}

// GetCompatibilityDate returns the CompatibilityDate field value
func (o *MetaChangelogEntry) GetCompatibilityDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompatibilityDate
}

// GetCompatibilityDateOk returns a tuple with the CompatibilityDate field value
// and a boolean to check if the value has been set.
func (o *MetaChangelogEntry) GetCompatibilityDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompatibilityDate, true
}

// SetCompatibilityDate sets field value
func (o *MetaChangelogEntry) SetCompatibilityDate(v string) {
	o.CompatibilityDate = v
}

// GetDescription returns the Description field value
func (o *MetaChangelogEntry) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MetaChangelogEntry) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MetaChangelogEntry) SetDescription(v string) {
	o.Description = v
}

// GetIsBreaking returns the IsBreaking field value
func (o *MetaChangelogEntry) GetIsBreaking() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBreaking
}

// GetIsBreakingOk returns a tuple with the IsBreaking field value
// and a boolean to check if the value has been set.
func (o *MetaChangelogEntry) GetIsBreakingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBreaking, true
}

// SetIsBreaking sets field value
func (o *MetaChangelogEntry) SetIsBreaking(v bool) {
	o.IsBreaking = v
}

// GetMethod returns the Method field value
func (o *MetaChangelogEntry) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *MetaChangelogEntry) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *MetaChangelogEntry) SetMethod(v string) {
	o.Method = v
}

// GetPath returns the Path field value
func (o *MetaChangelogEntry) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *MetaChangelogEntry) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *MetaChangelogEntry) SetPath(v string) {
	o.Path = v
}

func (o MetaChangelogEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaChangelogEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compatibility_date"] = o.CompatibilityDate
	toSerialize["description"] = o.Description
	toSerialize["is_breaking"] = o.IsBreaking
	toSerialize["method"] = o.Method
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *MetaChangelogEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compatibility_date",
		"description",
		"is_breaking",
		"method",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaChangelogEntry := _MetaChangelogEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaChangelogEntry)

	if err != nil {
		return err
	}

	*o = MetaChangelogEntry(varMetaChangelogEntry)

	return err
}

type NullableMetaChangelogEntry struct {
	value *MetaChangelogEntry
	isSet bool
}

func (v NullableMetaChangelogEntry) Get() *MetaChangelogEntry {
	return v.value
}

func (v *NullableMetaChangelogEntry) Set(val *MetaChangelogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaChangelogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaChangelogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaChangelogEntry(val *MetaChangelogEntry) *NullableMetaChangelogEntry {
	return &NullableMetaChangelogEntry{value: val, isSet: true}
}

func (v NullableMetaChangelogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaChangelogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


