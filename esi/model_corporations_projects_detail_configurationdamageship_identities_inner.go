/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner - struct for CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner
type CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner struct {
	AllianceId *AllianceId
	CharacterId *CharacterId
	CorporationId *CorporationId
	FactionId *FactionId
}

// AllianceIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner is a convenience function that returns AllianceId wrapped in CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner
func AllianceIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner(v *AllianceId) CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner {
	return CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner{
		AllianceId: v,
	}
}

// CharacterIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner is a convenience function that returns CharacterId wrapped in CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner
func CharacterIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner(v *CharacterId) CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner {
	return CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner{
		CharacterId: v,
	}
}

// CorporationIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner is a convenience function that returns CorporationId wrapped in CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner
func CorporationIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner(v *CorporationId) CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner {
	return CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner{
		CorporationId: v,
	}
}

// FactionIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner is a convenience function that returns FactionId wrapped in CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner
func FactionIdAsCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner(v *FactionId) CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner {
	return CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner{
		FactionId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AllianceId
	err = newStrictDecoder(data).Decode(&dst.AllianceId)
	if err == nil {
		jsonAllianceId, _ := json.Marshal(dst.AllianceId)
		if string(jsonAllianceId) == "{}" { // empty struct
			dst.AllianceId = nil
		} else {
			if err = validator.Validate(dst.AllianceId); err != nil {
				dst.AllianceId = nil
			} else {
				match++
			}
		}
	} else {
		dst.AllianceId = nil
	}

	// try to unmarshal data into CharacterId
	err = newStrictDecoder(data).Decode(&dst.CharacterId)
	if err == nil {
		jsonCharacterId, _ := json.Marshal(dst.CharacterId)
		if string(jsonCharacterId) == "{}" { // empty struct
			dst.CharacterId = nil
		} else {
			if err = validator.Validate(dst.CharacterId); err != nil {
				dst.CharacterId = nil
			} else {
				match++
			}
		}
	} else {
		dst.CharacterId = nil
	}

	// try to unmarshal data into CorporationId
	err = newStrictDecoder(data).Decode(&dst.CorporationId)
	if err == nil {
		jsonCorporationId, _ := json.Marshal(dst.CorporationId)
		if string(jsonCorporationId) == "{}" { // empty struct
			dst.CorporationId = nil
		} else {
			if err = validator.Validate(dst.CorporationId); err != nil {
				dst.CorporationId = nil
			} else {
				match++
			}
		}
	} else {
		dst.CorporationId = nil
	}

	// try to unmarshal data into FactionId
	err = newStrictDecoder(data).Decode(&dst.FactionId)
	if err == nil {
		jsonFactionId, _ := json.Marshal(dst.FactionId)
		if string(jsonFactionId) == "{}" { // empty struct
			dst.FactionId = nil
		} else {
			if err = validator.Validate(dst.FactionId); err != nil {
				dst.FactionId = nil
			} else {
				match++
			}
		}
	} else {
		dst.FactionId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AllianceId = nil
		dst.CharacterId = nil
		dst.CorporationId = nil
		dst.FactionId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) MarshalJSON() ([]byte, error) {
	if src.AllianceId != nil {
		return json.Marshal(&src.AllianceId)
	}

	if src.CharacterId != nil {
		return json.Marshal(&src.CharacterId)
	}

	if src.CorporationId != nil {
		return json.Marshal(&src.CorporationId)
	}

	if src.FactionId != nil {
		return json.Marshal(&src.FactionId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AllianceId != nil {
		return obj.AllianceId
	}

	if obj.CharacterId != nil {
		return obj.CharacterId
	}

	if obj.CorporationId != nil {
		return obj.CorporationId
	}

	if obj.FactionId != nil {
		return obj.FactionId
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) GetActualInstanceValue() (interface{}) {
	if obj.AllianceId != nil {
		return *obj.AllianceId
	}

	if obj.CharacterId != nil {
		return *obj.CharacterId
	}

	if obj.CorporationId != nil {
		return *obj.CorporationId
	}

	if obj.FactionId != nil {
		return *obj.FactionId
	}

	// all schemas are nil
	return nil
}

type NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner struct {
	value *CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner
	isSet bool
}

func (v NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) Get() *CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner {
	return v.value
}

func (v *NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) Set(val *CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner(val *CorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) *NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner {
	return &NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailConfigurationdamageshipIdentitiesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


