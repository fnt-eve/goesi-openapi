/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UniverseCategoriesCategoryIdGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniverseCategoriesCategoryIdGet{}

// UniverseCategoriesCategoryIdGet struct for UniverseCategoriesCategoryIdGet
type UniverseCategoriesCategoryIdGet struct {
	CategoryId int64 `json:"category_id"`
	Groups []int64 `json:"groups"`
	Name string `json:"name"`
	Published bool `json:"published"`
}

type _UniverseCategoriesCategoryIdGet UniverseCategoriesCategoryIdGet

// NewUniverseCategoriesCategoryIdGet instantiates a new UniverseCategoriesCategoryIdGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseCategoriesCategoryIdGet(categoryId int64, groups []int64, name string, published bool) *UniverseCategoriesCategoryIdGet {
	this := UniverseCategoriesCategoryIdGet{}
	this.CategoryId = categoryId
	this.Groups = groups
	this.Name = name
	this.Published = published
	return &this
}

// NewUniverseCategoriesCategoryIdGetWithDefaults instantiates a new UniverseCategoriesCategoryIdGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseCategoriesCategoryIdGetWithDefaults() *UniverseCategoriesCategoryIdGet {
	this := UniverseCategoriesCategoryIdGet{}
	return &this
}

// GetCategoryId returns the CategoryId field value
func (o *UniverseCategoriesCategoryIdGet) GetCategoryId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *UniverseCategoriesCategoryIdGet) GetCategoryIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *UniverseCategoriesCategoryIdGet) SetCategoryId(v int64) {
	o.CategoryId = v
}

// GetGroups returns the Groups field value
func (o *UniverseCategoriesCategoryIdGet) GetGroups() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *UniverseCategoriesCategoryIdGet) GetGroupsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *UniverseCategoriesCategoryIdGet) SetGroups(v []int64) {
	o.Groups = v
}

// GetName returns the Name field value
func (o *UniverseCategoriesCategoryIdGet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UniverseCategoriesCategoryIdGet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UniverseCategoriesCategoryIdGet) SetName(v string) {
	o.Name = v
}

// GetPublished returns the Published field value
func (o *UniverseCategoriesCategoryIdGet) GetPublished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Published
}

// GetPublishedOk returns a tuple with the Published field value
// and a boolean to check if the value has been set.
func (o *UniverseCategoriesCategoryIdGet) GetPublishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Published, true
}

// SetPublished sets field value
func (o *UniverseCategoriesCategoryIdGet) SetPublished(v bool) {
	o.Published = v
}

func (o UniverseCategoriesCategoryIdGet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniverseCategoriesCategoryIdGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category_id"] = o.CategoryId
	toSerialize["groups"] = o.Groups
	toSerialize["name"] = o.Name
	toSerialize["published"] = o.Published
	return toSerialize, nil
}

func (o *UniverseCategoriesCategoryIdGet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category_id",
		"groups",
		"name",
		"published",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUniverseCategoriesCategoryIdGet := _UniverseCategoriesCategoryIdGet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUniverseCategoriesCategoryIdGet)

	if err != nil {
		return err
	}

	*o = UniverseCategoriesCategoryIdGet(varUniverseCategoriesCategoryIdGet)

	return err
}

type NullableUniverseCategoriesCategoryIdGet struct {
	value *UniverseCategoriesCategoryIdGet
	isSet bool
}

func (v NullableUniverseCategoriesCategoryIdGet) Get() *UniverseCategoriesCategoryIdGet {
	return v.value
}

func (v *NullableUniverseCategoriesCategoryIdGet) Set(val *UniverseCategoriesCategoryIdGet) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseCategoriesCategoryIdGet) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseCategoriesCategoryIdGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseCategoriesCategoryIdGet(val *UniverseCategoriesCategoryIdGet) *NullableUniverseCategoriesCategoryIdGet {
	return &NullableUniverseCategoriesCategoryIdGet{value: val, isSet: true}
}

func (v NullableUniverseCategoriesCategoryIdGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseCategoriesCategoryIdGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


