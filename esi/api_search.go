/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type SearchAPI interface {

	/*
	GetCharactersCharacterIdSearch Search on a string

	Search for entities that match a given sub-string.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@return ApiGetCharactersCharacterIdSearchRequest
	*/
	GetCharactersCharacterIdSearch(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdSearchRequest

	// GetCharactersCharacterIdSearchExecute executes the request
	//  @return CharactersCharacterIdSearchGet
	GetCharactersCharacterIdSearchExecute(r ApiGetCharactersCharacterIdSearchRequest) (*CharactersCharacterIdSearchGet, *http.Response, error)
}

// SearchAPIService SearchAPI service
type SearchAPIService service

type ApiGetCharactersCharacterIdSearchRequest struct {
	ctx context.Context
	ApiService SearchAPI
	categories *[]string
	characterId int64
	search *string
	xCompatibilityDate *string
	strict *bool
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

func (r ApiGetCharactersCharacterIdSearchRequest) Categories(categories []string) ApiGetCharactersCharacterIdSearchRequest {
	r.categories = &categories
	return r
}

func (r ApiGetCharactersCharacterIdSearchRequest) Search(search string) ApiGetCharactersCharacterIdSearchRequest {
	r.search = &search
	return r
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdSearchRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdSearchRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCharactersCharacterIdSearchRequest) Strict(strict bool) ApiGetCharactersCharacterIdSearchRequest {
	r.strict = &strict
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdSearchRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdSearchRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdSearchRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdSearchRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdSearchRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdSearchRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdSearchRequest) Execute() (*CharactersCharacterIdSearchGet, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdSearchExecute(r)
}

/*
GetCharactersCharacterIdSearch Search on a string

Search for entities that match a given sub-string.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @return ApiGetCharactersCharacterIdSearchRequest
*/
func (a *SearchAPIService) GetCharactersCharacterIdSearch(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdSearchRequest {
	return ApiGetCharactersCharacterIdSearchRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
	}
}

// Execute executes the request
//  @return CharactersCharacterIdSearchGet
func (a *SearchAPIService) GetCharactersCharacterIdSearchExecute(r ApiGetCharactersCharacterIdSearchRequest) (*CharactersCharacterIdSearchGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CharactersCharacterIdSearchGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchAPIService.GetCharactersCharacterIdSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/search"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.categories == nil {
		return localVarReturnValue, nil, reportError("categories is required and must be specified")
	}
	if len(*r.categories) < 1 {
		return localVarReturnValue, nil, reportError("categories must have at least 1 elements")
	}
	if len(*r.categories) > 11 {
		return localVarReturnValue, nil, reportError("categories must have less than 11 elements")
	}
	if r.search == nil {
		return localVarReturnValue, nil, reportError("search is required and must be specified")
	}
	if strlen(*r.search) < 3 {
		return localVarReturnValue, nil, reportError("search must have at least 3 elements")
	}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	{
		t := *r.categories
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "categories", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "categories", t, "form", "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	if r.strict != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "strict", r.strict, "form", "")
	} else {
		var defaultValue bool = false
		r.strict = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
