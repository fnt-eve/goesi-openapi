/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
)

// checks if the AllianceId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllianceId{}

// AllianceId struct for AllianceId
type AllianceId struct {
	AllianceId *int64 `json:"alliance_id,omitempty"`
}

// NewAllianceId instantiates a new AllianceId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllianceId() *AllianceId {
	this := AllianceId{}
	return &this
}

// NewAllianceIdWithDefaults instantiates a new AllianceId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllianceIdWithDefaults() *AllianceId {
	this := AllianceId{}
	return &this
}

// GetAllianceId returns the AllianceId field value if set, zero value otherwise.
func (o *AllianceId) GetAllianceId() int64 {
	if o == nil || IsNil(o.AllianceId) {
		var ret int64
		return ret
	}
	return *o.AllianceId
}

// GetAllianceIdOk returns a tuple with the AllianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceId) GetAllianceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AllianceId) {
		return nil, false
	}
	return o.AllianceId, true
}

// HasAllianceId returns a boolean if a field has been set.
func (o *AllianceId) HasAllianceId() bool {
	if o != nil && !IsNil(o.AllianceId) {
		return true
	}

	return false
}

// SetAllianceId gets a reference to the given int64 and assigns it to the AllianceId field.
func (o *AllianceId) SetAllianceId(v int64) {
	o.AllianceId = &v
}

func (o AllianceId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllianceId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllianceId) {
		toSerialize["alliance_id"] = o.AllianceId
	}
	return toSerialize, nil
}

type NullableAllianceId struct {
	value *AllianceId
	isSet bool
}

func (v NullableAllianceId) Get() *AllianceId {
	return v.value
}

func (v *NullableAllianceId) Set(val *AllianceId) {
	v.value = val
	v.isSet = true
}

func (v NullableAllianceId) IsSet() bool {
	return v.isSet
}

func (v *NullableAllianceId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllianceId(val *AllianceId) *NullableAllianceId {
	return &NullableAllianceId{value: val, isSet: true}
}

func (v NullableAllianceId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllianceId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


