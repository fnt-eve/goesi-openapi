/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CorporationsProjectsDetailConfigurationdamageshipShipsInner - struct for CorporationsProjectsDetailConfigurationdamageshipShipsInner
type CorporationsProjectsDetailConfigurationdamageshipShipsInner struct {
	GroupId *GroupId
	TypeId *TypeId
}

// GroupIdAsCorporationsProjectsDetailConfigurationdamageshipShipsInner is a convenience function that returns GroupId wrapped in CorporationsProjectsDetailConfigurationdamageshipShipsInner
func GroupIdAsCorporationsProjectsDetailConfigurationdamageshipShipsInner(v *GroupId) CorporationsProjectsDetailConfigurationdamageshipShipsInner {
	return CorporationsProjectsDetailConfigurationdamageshipShipsInner{
		GroupId: v,
	}
}

// TypeIdAsCorporationsProjectsDetailConfigurationdamageshipShipsInner is a convenience function that returns TypeId wrapped in CorporationsProjectsDetailConfigurationdamageshipShipsInner
func TypeIdAsCorporationsProjectsDetailConfigurationdamageshipShipsInner(v *TypeId) CorporationsProjectsDetailConfigurationdamageshipShipsInner {
	return CorporationsProjectsDetailConfigurationdamageshipShipsInner{
		TypeId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CorporationsProjectsDetailConfigurationdamageshipShipsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GroupId
	err = newStrictDecoder(data).Decode(&dst.GroupId)
	if err == nil {
		jsonGroupId, _ := json.Marshal(dst.GroupId)
		if string(jsonGroupId) == "{}" { // empty struct
			dst.GroupId = nil
		} else {
			if err = validator.Validate(dst.GroupId); err != nil {
				dst.GroupId = nil
			} else {
				match++
			}
		}
	} else {
		dst.GroupId = nil
	}

	// try to unmarshal data into TypeId
	err = newStrictDecoder(data).Decode(&dst.TypeId)
	if err == nil {
		jsonTypeId, _ := json.Marshal(dst.TypeId)
		if string(jsonTypeId) == "{}" { // empty struct
			dst.TypeId = nil
		} else {
			if err = validator.Validate(dst.TypeId); err != nil {
				dst.TypeId = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypeId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GroupId = nil
		dst.TypeId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CorporationsProjectsDetailConfigurationdamageshipShipsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CorporationsProjectsDetailConfigurationdamageshipShipsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CorporationsProjectsDetailConfigurationdamageshipShipsInner) MarshalJSON() ([]byte, error) {
	if src.GroupId != nil {
		return json.Marshal(&src.GroupId)
	}

	if src.TypeId != nil {
		return json.Marshal(&src.TypeId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CorporationsProjectsDetailConfigurationdamageshipShipsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GroupId != nil {
		return obj.GroupId
	}

	if obj.TypeId != nil {
		return obj.TypeId
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CorporationsProjectsDetailConfigurationdamageshipShipsInner) GetActualInstanceValue() (interface{}) {
	if obj.GroupId != nil {
		return *obj.GroupId
	}

	if obj.TypeId != nil {
		return *obj.TypeId
	}

	// all schemas are nil
	return nil
}

type NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner struct {
	value *CorporationsProjectsDetailConfigurationdamageshipShipsInner
	isSet bool
}

func (v NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner) Get() *CorporationsProjectsDetailConfigurationdamageshipShipsInner {
	return v.value
}

func (v *NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner) Set(val *CorporationsProjectsDetailConfigurationdamageshipShipsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailConfigurationdamageshipShipsInner(val *CorporationsProjectsDetailConfigurationdamageshipShipsInner) *NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner {
	return &NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailConfigurationdamageshipShipsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


