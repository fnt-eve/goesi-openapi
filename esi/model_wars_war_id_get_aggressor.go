/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WarsWarIdGetAggressor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarsWarIdGetAggressor{}

// WarsWarIdGetAggressor The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
type WarsWarIdGetAggressor struct {
	// Alliance ID if and only if the aggressor is an alliance
	AllianceId *int64 `json:"alliance_id,omitempty"`
	// Corporation ID if and only if the aggressor is a corporation
	CorporationId *int64 `json:"corporation_id,omitempty"`
	// ISK value of ships the aggressor has destroyed
	IskDestroyed float64 `json:"isk_destroyed"`
	// The number of ships the aggressor has killed
	ShipsKilled int64 `json:"ships_killed"`
}

type _WarsWarIdGetAggressor WarsWarIdGetAggressor

// NewWarsWarIdGetAggressor instantiates a new WarsWarIdGetAggressor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarsWarIdGetAggressor(iskDestroyed float64, shipsKilled int64) *WarsWarIdGetAggressor {
	this := WarsWarIdGetAggressor{}
	this.IskDestroyed = iskDestroyed
	this.ShipsKilled = shipsKilled
	return &this
}

// NewWarsWarIdGetAggressorWithDefaults instantiates a new WarsWarIdGetAggressor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarsWarIdGetAggressorWithDefaults() *WarsWarIdGetAggressor {
	this := WarsWarIdGetAggressor{}
	return &this
}

// GetAllianceId returns the AllianceId field value if set, zero value otherwise.
func (o *WarsWarIdGetAggressor) GetAllianceId() int64 {
	if o == nil || IsNil(o.AllianceId) {
		var ret int64
		return ret
	}
	return *o.AllianceId
}

// GetAllianceIdOk returns a tuple with the AllianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarsWarIdGetAggressor) GetAllianceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AllianceId) {
		return nil, false
	}
	return o.AllianceId, true
}

// HasAllianceId returns a boolean if a field has been set.
func (o *WarsWarIdGetAggressor) HasAllianceId() bool {
	if o != nil && !IsNil(o.AllianceId) {
		return true
	}

	return false
}

// SetAllianceId gets a reference to the given int64 and assigns it to the AllianceId field.
func (o *WarsWarIdGetAggressor) SetAllianceId(v int64) {
	o.AllianceId = &v
}

// GetCorporationId returns the CorporationId field value if set, zero value otherwise.
func (o *WarsWarIdGetAggressor) GetCorporationId() int64 {
	if o == nil || IsNil(o.CorporationId) {
		var ret int64
		return ret
	}
	return *o.CorporationId
}

// GetCorporationIdOk returns a tuple with the CorporationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarsWarIdGetAggressor) GetCorporationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CorporationId) {
		return nil, false
	}
	return o.CorporationId, true
}

// HasCorporationId returns a boolean if a field has been set.
func (o *WarsWarIdGetAggressor) HasCorporationId() bool {
	if o != nil && !IsNil(o.CorporationId) {
		return true
	}

	return false
}

// SetCorporationId gets a reference to the given int64 and assigns it to the CorporationId field.
func (o *WarsWarIdGetAggressor) SetCorporationId(v int64) {
	o.CorporationId = &v
}

// GetIskDestroyed returns the IskDestroyed field value
func (o *WarsWarIdGetAggressor) GetIskDestroyed() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.IskDestroyed
}

// GetIskDestroyedOk returns a tuple with the IskDestroyed field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGetAggressor) GetIskDestroyedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IskDestroyed, true
}

// SetIskDestroyed sets field value
func (o *WarsWarIdGetAggressor) SetIskDestroyed(v float64) {
	o.IskDestroyed = v
}

// GetShipsKilled returns the ShipsKilled field value
func (o *WarsWarIdGetAggressor) GetShipsKilled() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ShipsKilled
}

// GetShipsKilledOk returns a tuple with the ShipsKilled field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGetAggressor) GetShipsKilledOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShipsKilled, true
}

// SetShipsKilled sets field value
func (o *WarsWarIdGetAggressor) SetShipsKilled(v int64) {
	o.ShipsKilled = v
}

func (o WarsWarIdGetAggressor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarsWarIdGetAggressor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllianceId) {
		toSerialize["alliance_id"] = o.AllianceId
	}
	if !IsNil(o.CorporationId) {
		toSerialize["corporation_id"] = o.CorporationId
	}
	toSerialize["isk_destroyed"] = o.IskDestroyed
	toSerialize["ships_killed"] = o.ShipsKilled
	return toSerialize, nil
}

func (o *WarsWarIdGetAggressor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isk_destroyed",
		"ships_killed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWarsWarIdGetAggressor := _WarsWarIdGetAggressor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWarsWarIdGetAggressor)

	if err != nil {
		return err
	}

	*o = WarsWarIdGetAggressor(varWarsWarIdGetAggressor)

	return err
}

type NullableWarsWarIdGetAggressor struct {
	value *WarsWarIdGetAggressor
	isSet bool
}

func (v NullableWarsWarIdGetAggressor) Get() *WarsWarIdGetAggressor {
	return v.value
}

func (v *NullableWarsWarIdGetAggressor) Set(val *WarsWarIdGetAggressor) {
	v.value = val
	v.isSet = true
}

func (v NullableWarsWarIdGetAggressor) IsSet() bool {
	return v.isSet
}

func (v *NullableWarsWarIdGetAggressor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarsWarIdGetAggressor(val *WarsWarIdGetAggressor) *NullableWarsWarIdGetAggressor {
	return &NullableWarsWarIdGetAggressor{value: val, isSet: true}
}

func (v NullableWarsWarIdGetAggressor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarsWarIdGetAggressor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


