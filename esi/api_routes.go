/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type RoutesAPI interface {

	/*
	GetRouteOriginDestination Get route

	Get the systems between origin and destination

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param destination
	@param origin
	@return ApiGetRouteOriginDestinationRequest
	*/
	GetRouteOriginDestination(ctx context.Context, destination int64, origin int64) ApiGetRouteOriginDestinationRequest

	// GetRouteOriginDestinationExecute executes the request
	//  @return []int64
	GetRouteOriginDestinationExecute(r ApiGetRouteOriginDestinationRequest) ([]int64, *http.Response, error)
}

// RoutesAPIService RoutesAPI service
type RoutesAPIService service

type ApiGetRouteOriginDestinationRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	destination int64
	origin int64
	xCompatibilityDate *string
	avoid *[]int64
	connections *[][]int64
	flag *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetRouteOriginDestinationRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetRouteOriginDestinationRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetRouteOriginDestinationRequest) Avoid(avoid []int64) ApiGetRouteOriginDestinationRequest {
	r.avoid = &avoid
	return r
}

func (r ApiGetRouteOriginDestinationRequest) Connections(connections [][]int64) ApiGetRouteOriginDestinationRequest {
	r.connections = &connections
	return r
}

func (r ApiGetRouteOriginDestinationRequest) Flag(flag string) ApiGetRouteOriginDestinationRequest {
	r.flag = &flag
	return r
}

// The language to use for the response.
func (r ApiGetRouteOriginDestinationRequest) AcceptLanguage(acceptLanguage string) ApiGetRouteOriginDestinationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetRouteOriginDestinationRequest) IfNoneMatch(ifNoneMatch string) ApiGetRouteOriginDestinationRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetRouteOriginDestinationRequest) XTenant(xTenant string) ApiGetRouteOriginDestinationRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetRouteOriginDestinationRequest) Execute() ([]int64, *http.Response, error) {
	return r.ApiService.GetRouteOriginDestinationExecute(r)
}

/*
GetRouteOriginDestination Get route

Get the systems between origin and destination

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param destination
 @param origin
 @return ApiGetRouteOriginDestinationRequest
*/
func (a *RoutesAPIService) GetRouteOriginDestination(ctx context.Context, destination int64, origin int64) ApiGetRouteOriginDestinationRequest {
	return ApiGetRouteOriginDestinationRequest{
		ApiService: a,
		ctx: ctx,
		destination: destination,
		origin: origin,
	}
}

// Execute executes the request
//  @return []int64
func (a *RoutesAPIService) GetRouteOriginDestinationExecute(r ApiGetRouteOriginDestinationRequest) ([]int64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.GetRouteOriginDestination")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/route/{origin}/{destination}"
	localVarPath = strings.Replace(localVarPath, "{"+"destination"+"}", url.PathEscape(parameterValueToString(r.destination, "destination")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.avoid != nil {
		t := *r.avoid
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "avoid", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "avoid", t, "form", "multi")
		}
	}
	if r.connections != nil {
		t := *r.connections
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "connections", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "connections", t, "form", "multi")
		}
	}
	if r.flag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flag", r.flag, "form", "")
	} else {
		var defaultValue string = "shortest"
		r.flag = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
