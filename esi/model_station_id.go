/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
)

// checks if the StationId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StationId{}

// StationId struct for StationId
type StationId struct {
	StationId *int64 `json:"station_id,omitempty"`
}

// NewStationId instantiates a new StationId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStationId() *StationId {
	this := StationId{}
	return &this
}

// NewStationIdWithDefaults instantiates a new StationId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStationIdWithDefaults() *StationId {
	this := StationId{}
	return &this
}

// GetStationId returns the StationId field value if set, zero value otherwise.
func (o *StationId) GetStationId() int64 {
	if o == nil || IsNil(o.StationId) {
		var ret int64
		return ret
	}
	return *o.StationId
}

// GetStationIdOk returns a tuple with the StationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StationId) GetStationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.StationId) {
		return nil, false
	}
	return o.StationId, true
}

// HasStationId returns a boolean if a field has been set.
func (o *StationId) HasStationId() bool {
	if o != nil && !IsNil(o.StationId) {
		return true
	}

	return false
}

// SetStationId gets a reference to the given int64 and assigns it to the StationId field.
func (o *StationId) SetStationId(v int64) {
	o.StationId = &v
}

func (o StationId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StationId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StationId) {
		toSerialize["station_id"] = o.StationId
	}
	return toSerialize, nil
}

type NullableStationId struct {
	value *StationId
	isSet bool
}

func (v NullableStationId) Get() *StationId {
	return v.value
}

func (v *NullableStationId) Set(val *StationId) {
	v.value = val
	v.isSet = true
}

func (v NullableStationId) IsSet() bool {
	return v.isSet
}

func (v *NullableStationId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStationId(val *StationId) *NullableStationId {
	return &NullableStationId{value: val, isSet: true}
}

func (v NullableStationId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStationId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


