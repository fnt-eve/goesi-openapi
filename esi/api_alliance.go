/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AllianceAPI interface {

	/*
	GetAlliances List all alliances

	List all active player alliances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAlliancesRequest
	*/
	GetAlliances(ctx context.Context) ApiGetAlliancesRequest

	// GetAlliancesExecute executes the request
	//  @return []int64
	GetAlliancesExecute(r ApiGetAlliancesRequest) ([]int64, *http.Response, error)

	/*
	GetAlliancesAllianceId Get alliance information

	Public information about an alliance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param allianceId The ID of the alliance
	@return ApiGetAlliancesAllianceIdRequest
	*/
	GetAlliancesAllianceId(ctx context.Context, allianceId int64) ApiGetAlliancesAllianceIdRequest

	// GetAlliancesAllianceIdExecute executes the request
	//  @return AlliancesAllianceIdGet
	GetAlliancesAllianceIdExecute(r ApiGetAlliancesAllianceIdRequest) (*AlliancesAllianceIdGet, *http.Response, error)

	/*
	GetAlliancesAllianceIdCorporations List alliance's corporations

	List all current member corporations of an alliance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param allianceId The ID of the alliance
	@return ApiGetAlliancesAllianceIdCorporationsRequest
	*/
	GetAlliancesAllianceIdCorporations(ctx context.Context, allianceId int64) ApiGetAlliancesAllianceIdCorporationsRequest

	// GetAlliancesAllianceIdCorporationsExecute executes the request
	//  @return []int64
	GetAlliancesAllianceIdCorporationsExecute(r ApiGetAlliancesAllianceIdCorporationsRequest) ([]int64, *http.Response, error)

	/*
	GetAlliancesAllianceIdIcons Get alliance icon

	Get the icon urls for a alliance

This route expires daily at 11:05

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param allianceId The ID of the alliance
	@return ApiGetAlliancesAllianceIdIconsRequest
	*/
	GetAlliancesAllianceIdIcons(ctx context.Context, allianceId int64) ApiGetAlliancesAllianceIdIconsRequest

	// GetAlliancesAllianceIdIconsExecute executes the request
	//  @return AlliancesAllianceIdIconsGet
	GetAlliancesAllianceIdIconsExecute(r ApiGetAlliancesAllianceIdIconsRequest) (*AlliancesAllianceIdIconsGet, *http.Response, error)
}

// AllianceAPIService AllianceAPI service
type AllianceAPIService service

type ApiGetAlliancesRequest struct {
	ctx context.Context
	ApiService AllianceAPI
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetAlliancesRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetAlliancesRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetAlliancesRequest) AcceptLanguage(acceptLanguage string) ApiGetAlliancesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetAlliancesRequest) IfNoneMatch(ifNoneMatch string) ApiGetAlliancesRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetAlliancesRequest) XTenant(xTenant string) ApiGetAlliancesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetAlliancesRequest) Execute() ([]int64, *http.Response, error) {
	return r.ApiService.GetAlliancesExecute(r)
}

/*
GetAlliances List all alliances

List all active player alliances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlliancesRequest
*/
func (a *AllianceAPIService) GetAlliances(ctx context.Context) ApiGetAlliancesRequest {
	return ApiGetAlliancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []int64
func (a *AllianceAPIService) GetAlliancesExecute(r ApiGetAlliancesRequest) ([]int64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllianceAPIService.GetAlliances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alliances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlliancesAllianceIdRequest struct {
	ctx context.Context
	ApiService AllianceAPI
	allianceId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetAlliancesAllianceIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetAlliancesAllianceIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetAlliancesAllianceIdRequest) AcceptLanguage(acceptLanguage string) ApiGetAlliancesAllianceIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetAlliancesAllianceIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetAlliancesAllianceIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetAlliancesAllianceIdRequest) XTenant(xTenant string) ApiGetAlliancesAllianceIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetAlliancesAllianceIdRequest) Execute() (*AlliancesAllianceIdGet, *http.Response, error) {
	return r.ApiService.GetAlliancesAllianceIdExecute(r)
}

/*
GetAlliancesAllianceId Get alliance information

Public information about an alliance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param allianceId The ID of the alliance
 @return ApiGetAlliancesAllianceIdRequest
*/
func (a *AllianceAPIService) GetAlliancesAllianceId(ctx context.Context, allianceId int64) ApiGetAlliancesAllianceIdRequest {
	return ApiGetAlliancesAllianceIdRequest{
		ApiService: a,
		ctx: ctx,
		allianceId: allianceId,
	}
}

// Execute executes the request
//  @return AlliancesAllianceIdGet
func (a *AllianceAPIService) GetAlliancesAllianceIdExecute(r ApiGetAlliancesAllianceIdRequest) (*AlliancesAllianceIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlliancesAllianceIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllianceAPIService.GetAlliancesAllianceId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alliances/{alliance_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"alliance_id"+"}", url.PathEscape(parameterValueToString(r.allianceId, "allianceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlliancesAllianceIdCorporationsRequest struct {
	ctx context.Context
	ApiService AllianceAPI
	allianceId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetAlliancesAllianceIdCorporationsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetAlliancesAllianceIdCorporationsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetAlliancesAllianceIdCorporationsRequest) AcceptLanguage(acceptLanguage string) ApiGetAlliancesAllianceIdCorporationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetAlliancesAllianceIdCorporationsRequest) IfNoneMatch(ifNoneMatch string) ApiGetAlliancesAllianceIdCorporationsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetAlliancesAllianceIdCorporationsRequest) XTenant(xTenant string) ApiGetAlliancesAllianceIdCorporationsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetAlliancesAllianceIdCorporationsRequest) Execute() ([]int64, *http.Response, error) {
	return r.ApiService.GetAlliancesAllianceIdCorporationsExecute(r)
}

/*
GetAlliancesAllianceIdCorporations List alliance's corporations

List all current member corporations of an alliance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param allianceId The ID of the alliance
 @return ApiGetAlliancesAllianceIdCorporationsRequest
*/
func (a *AllianceAPIService) GetAlliancesAllianceIdCorporations(ctx context.Context, allianceId int64) ApiGetAlliancesAllianceIdCorporationsRequest {
	return ApiGetAlliancesAllianceIdCorporationsRequest{
		ApiService: a,
		ctx: ctx,
		allianceId: allianceId,
	}
}

// Execute executes the request
//  @return []int64
func (a *AllianceAPIService) GetAlliancesAllianceIdCorporationsExecute(r ApiGetAlliancesAllianceIdCorporationsRequest) ([]int64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllianceAPIService.GetAlliancesAllianceIdCorporations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alliances/{alliance_id}/corporations"
	localVarPath = strings.Replace(localVarPath, "{"+"alliance_id"+"}", url.PathEscape(parameterValueToString(r.allianceId, "allianceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlliancesAllianceIdIconsRequest struct {
	ctx context.Context
	ApiService AllianceAPI
	allianceId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetAlliancesAllianceIdIconsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetAlliancesAllianceIdIconsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetAlliancesAllianceIdIconsRequest) AcceptLanguage(acceptLanguage string) ApiGetAlliancesAllianceIdIconsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetAlliancesAllianceIdIconsRequest) IfNoneMatch(ifNoneMatch string) ApiGetAlliancesAllianceIdIconsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetAlliancesAllianceIdIconsRequest) XTenant(xTenant string) ApiGetAlliancesAllianceIdIconsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetAlliancesAllianceIdIconsRequest) Execute() (*AlliancesAllianceIdIconsGet, *http.Response, error) {
	return r.ApiService.GetAlliancesAllianceIdIconsExecute(r)
}

/*
GetAlliancesAllianceIdIcons Get alliance icon

Get the icon urls for a alliance

This route expires daily at 11:05

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param allianceId The ID of the alliance
 @return ApiGetAlliancesAllianceIdIconsRequest
*/
func (a *AllianceAPIService) GetAlliancesAllianceIdIcons(ctx context.Context, allianceId int64) ApiGetAlliancesAllianceIdIconsRequest {
	return ApiGetAlliancesAllianceIdIconsRequest{
		ApiService: a,
		ctx: ctx,
		allianceId: allianceId,
	}
}

// Execute executes the request
//  @return AlliancesAllianceIdIconsGet
func (a *AllianceAPIService) GetAlliancesAllianceIdIconsExecute(r ApiGetAlliancesAllianceIdIconsRequest) (*AlliancesAllianceIdIconsGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlliancesAllianceIdIconsGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllianceAPIService.GetAlliancesAllianceIdIcons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alliances/{alliance_id}/icons"
	localVarPath = strings.Replace(localVarPath, "{"+"alliance_id"+"}", url.PathEscape(parameterValueToString(r.allianceId, "allianceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
