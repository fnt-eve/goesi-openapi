/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type KillmailsAPI interface {

	/*
	GetCharactersCharacterIdKillmailsRecent Get a character's recent kills and losses

	Return a list of a character's kills and losses going back 90 days

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@return ApiGetCharactersCharacterIdKillmailsRecentRequest
	*/
	GetCharactersCharacterIdKillmailsRecent(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdKillmailsRecentRequest

	// GetCharactersCharacterIdKillmailsRecentExecute executes the request
	//  @return []CharactersCharacterIdKillmailsRecentGetInner
	GetCharactersCharacterIdKillmailsRecentExecute(r ApiGetCharactersCharacterIdKillmailsRecentRequest) ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error)

	/*
	GetCorporationsCorporationIdKillmailsRecent Get a corporation's recent kills and losses

	Get a list of a corporation's kills and losses going back 90 days

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param corporationId The ID of the corporation
	@return ApiGetCorporationsCorporationIdKillmailsRecentRequest
	*/
	GetCorporationsCorporationIdKillmailsRecent(ctx context.Context, corporationId int64) ApiGetCorporationsCorporationIdKillmailsRecentRequest

	// GetCorporationsCorporationIdKillmailsRecentExecute executes the request
	//  @return []CharactersCharacterIdKillmailsRecentGetInner
	GetCorporationsCorporationIdKillmailsRecentExecute(r ApiGetCorporationsCorporationIdKillmailsRecentRequest) ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error)

	/*
	GetKillmailsKillmailIdKillmailHash Get a single killmail

	Return a single killmail from its ID and hash

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param killmailHash
	@param killmailId
	@return ApiGetKillmailsKillmailIdKillmailHashRequest
	*/
	GetKillmailsKillmailIdKillmailHash(ctx context.Context, killmailHash string, killmailId int64) ApiGetKillmailsKillmailIdKillmailHashRequest

	// GetKillmailsKillmailIdKillmailHashExecute executes the request
	//  @return KillmailsKillmailIdKillmailHashGet
	GetKillmailsKillmailIdKillmailHashExecute(r ApiGetKillmailsKillmailIdKillmailHashRequest) (*KillmailsKillmailIdKillmailHashGet, *http.Response, error)
}

// KillmailsAPIService KillmailsAPI service
type KillmailsAPIService service

type ApiGetCharactersCharacterIdKillmailsRecentRequest struct {
	ctx context.Context
	ApiService KillmailsAPI
	characterId int64
	xCompatibilityDate *string
	page *int32
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdKillmailsRecentRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdKillmailsRecentRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCharactersCharacterIdKillmailsRecentRequest) Page(page int32) ApiGetCharactersCharacterIdKillmailsRecentRequest {
	r.page = &page
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdKillmailsRecentRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdKillmailsRecentRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdKillmailsRecentRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdKillmailsRecentRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdKillmailsRecentRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdKillmailsRecentRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdKillmailsRecentRequest) Execute() ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdKillmailsRecentExecute(r)
}

/*
GetCharactersCharacterIdKillmailsRecent Get a character's recent kills and losses

Return a list of a character's kills and losses going back 90 days

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @return ApiGetCharactersCharacterIdKillmailsRecentRequest
*/
func (a *KillmailsAPIService) GetCharactersCharacterIdKillmailsRecent(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdKillmailsRecentRequest {
	return ApiGetCharactersCharacterIdKillmailsRecentRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdKillmailsRecentGetInner
func (a *KillmailsAPIService) GetCharactersCharacterIdKillmailsRecentExecute(r ApiGetCharactersCharacterIdKillmailsRecentRequest) ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdKillmailsRecentGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KillmailsAPIService.GetCharactersCharacterIdKillmailsRecent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/killmails/recent"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		defaultCompatibilityDate := "2020-01-01"
		r.xCompatibilityDate = &defaultCompatibilityDate
	}
	// Removed original error check - now using default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCorporationsCorporationIdKillmailsRecentRequest struct {
	ctx context.Context
	ApiService KillmailsAPI
	corporationId int64
	xCompatibilityDate *string
	page *int32
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCorporationsCorporationIdKillmailsRecentRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCorporationsCorporationIdKillmailsRecentRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCorporationsCorporationIdKillmailsRecentRequest) Page(page int32) ApiGetCorporationsCorporationIdKillmailsRecentRequest {
	r.page = &page
	return r
}

// The language to use for the response.
func (r ApiGetCorporationsCorporationIdKillmailsRecentRequest) AcceptLanguage(acceptLanguage string) ApiGetCorporationsCorporationIdKillmailsRecentRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCorporationsCorporationIdKillmailsRecentRequest) IfNoneMatch(ifNoneMatch string) ApiGetCorporationsCorporationIdKillmailsRecentRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCorporationsCorporationIdKillmailsRecentRequest) XTenant(xTenant string) ApiGetCorporationsCorporationIdKillmailsRecentRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCorporationsCorporationIdKillmailsRecentRequest) Execute() ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error) {
	return r.ApiService.GetCorporationsCorporationIdKillmailsRecentExecute(r)
}

/*
GetCorporationsCorporationIdKillmailsRecent Get a corporation's recent kills and losses

Get a list of a corporation's kills and losses going back 90 days

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param corporationId The ID of the corporation
 @return ApiGetCorporationsCorporationIdKillmailsRecentRequest
*/
func (a *KillmailsAPIService) GetCorporationsCorporationIdKillmailsRecent(ctx context.Context, corporationId int64) ApiGetCorporationsCorporationIdKillmailsRecentRequest {
	return ApiGetCorporationsCorporationIdKillmailsRecentRequest{
		ApiService: a,
		ctx: ctx,
		corporationId: corporationId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdKillmailsRecentGetInner
func (a *KillmailsAPIService) GetCorporationsCorporationIdKillmailsRecentExecute(r ApiGetCorporationsCorporationIdKillmailsRecentRequest) ([]CharactersCharacterIdKillmailsRecentGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdKillmailsRecentGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KillmailsAPIService.GetCorporationsCorporationIdKillmailsRecent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/corporations/{corporation_id}/killmails/recent"
	localVarPath = strings.Replace(localVarPath, "{"+"corporation_id"+"}", url.PathEscape(parameterValueToString(r.corporationId, "corporationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		defaultCompatibilityDate := "2020-01-01"
		r.xCompatibilityDate = &defaultCompatibilityDate
	}
	// Removed original error check - now using default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKillmailsKillmailIdKillmailHashRequest struct {
	ctx context.Context
	ApiService KillmailsAPI
	killmailHash string
	killmailId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetKillmailsKillmailIdKillmailHashRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetKillmailsKillmailIdKillmailHashRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetKillmailsKillmailIdKillmailHashRequest) AcceptLanguage(acceptLanguage string) ApiGetKillmailsKillmailIdKillmailHashRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetKillmailsKillmailIdKillmailHashRequest) IfNoneMatch(ifNoneMatch string) ApiGetKillmailsKillmailIdKillmailHashRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetKillmailsKillmailIdKillmailHashRequest) XTenant(xTenant string) ApiGetKillmailsKillmailIdKillmailHashRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetKillmailsKillmailIdKillmailHashRequest) Execute() (*KillmailsKillmailIdKillmailHashGet, *http.Response, error) {
	return r.ApiService.GetKillmailsKillmailIdKillmailHashExecute(r)
}

/*
GetKillmailsKillmailIdKillmailHash Get a single killmail

Return a single killmail from its ID and hash

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param killmailHash
 @param killmailId
 @return ApiGetKillmailsKillmailIdKillmailHashRequest
*/
func (a *KillmailsAPIService) GetKillmailsKillmailIdKillmailHash(ctx context.Context, killmailHash string, killmailId int64) ApiGetKillmailsKillmailIdKillmailHashRequest {
	return ApiGetKillmailsKillmailIdKillmailHashRequest{
		ApiService: a,
		ctx: ctx,
		killmailHash: killmailHash,
		killmailId: killmailId,
	}
}

// Execute executes the request
//  @return KillmailsKillmailIdKillmailHashGet
func (a *KillmailsAPIService) GetKillmailsKillmailIdKillmailHashExecute(r ApiGetKillmailsKillmailIdKillmailHashRequest) (*KillmailsKillmailIdKillmailHashGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KillmailsKillmailIdKillmailHashGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KillmailsAPIService.GetKillmailsKillmailIdKillmailHash")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/killmails/{killmail_id}/{killmail_hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"killmail_hash"+"}", url.PathEscape(parameterValueToString(r.killmailHash, "killmailHash")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"killmail_id"+"}", url.PathEscape(parameterValueToString(r.killmailId, "killmailId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		defaultCompatibilityDate := "2020-01-01"
		r.xCompatibilityDate = &defaultCompatibilityDate
	}
	// Removed original error check - now using default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
