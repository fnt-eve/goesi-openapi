/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CorporationsProjectsListing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorporationsProjectsListing{}

// CorporationsProjectsListing struct for CorporationsProjectsListing
type CorporationsProjectsListing struct {
	Cursor *Cursor `json:"cursor,omitempty"`
	// List of projects
	Projects []CorporationsProjectsDetailProject `json:"projects"`
}

type _CorporationsProjectsListing CorporationsProjectsListing

// NewCorporationsProjectsListing instantiates a new CorporationsProjectsListing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporationsProjectsListing(projects []CorporationsProjectsDetailProject) *CorporationsProjectsListing {
	this := CorporationsProjectsListing{}
	this.Projects = projects
	return &this
}

// NewCorporationsProjectsListingWithDefaults instantiates a new CorporationsProjectsListing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporationsProjectsListingWithDefaults() *CorporationsProjectsListing {
	this := CorporationsProjectsListing{}
	return &this
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *CorporationsProjectsListing) GetCursor() Cursor {
	if o == nil || IsNil(o.Cursor) {
		var ret Cursor
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsProjectsListing) GetCursorOk() (*Cursor, bool) {
	if o == nil || IsNil(o.Cursor) {
		return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *CorporationsProjectsListing) HasCursor() bool {
	if o != nil && !IsNil(o.Cursor) {
		return true
	}

	return false
}

// SetCursor gets a reference to the given Cursor and assigns it to the Cursor field.
func (o *CorporationsProjectsListing) SetCursor(v Cursor) {
	o.Cursor = &v
}

// GetProjects returns the Projects field value
func (o *CorporationsProjectsListing) GetProjects() []CorporationsProjectsDetailProject {
	if o == nil {
		var ret []CorporationsProjectsDetailProject
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *CorporationsProjectsListing) GetProjectsOk() ([]CorporationsProjectsDetailProject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Projects, true
}

// SetProjects sets field value
func (o *CorporationsProjectsListing) SetProjects(v []CorporationsProjectsDetailProject) {
	o.Projects = v
}

func (o CorporationsProjectsListing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorporationsProjectsListing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cursor) {
		toSerialize["cursor"] = o.Cursor
	}
	toSerialize["projects"] = o.Projects
	return toSerialize, nil
}

func (o *CorporationsProjectsListing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorporationsProjectsListing := _CorporationsProjectsListing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorporationsProjectsListing)

	if err != nil {
		return err
	}

	*o = CorporationsProjectsListing(varCorporationsProjectsListing)

	return err
}

type NullableCorporationsProjectsListing struct {
	value *CorporationsProjectsListing
	isSet bool
}

func (v NullableCorporationsProjectsListing) Get() *CorporationsProjectsListing {
	return v.value
}

func (v *NullableCorporationsProjectsListing) Set(val *CorporationsProjectsListing) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsListing) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsListing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsListing(val *CorporationsProjectsListing) *NullableCorporationsProjectsListing {
	return &NullableCorporationsProjectsListing{value: val, isSet: true}
}

func (v NullableCorporationsProjectsListing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsListing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


