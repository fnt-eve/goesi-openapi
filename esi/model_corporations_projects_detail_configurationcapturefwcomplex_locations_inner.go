/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner - struct for CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner
type CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner struct {
	ConstellationId *ConstellationId
	RegionId *RegionId
	SolarSystemId *SolarSystemId
}

// ConstellationIdAsCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner is a convenience function that returns ConstellationId wrapped in CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner
func ConstellationIdAsCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner(v *ConstellationId) CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner {
	return CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner{
		ConstellationId: v,
	}
}

// RegionIdAsCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner is a convenience function that returns RegionId wrapped in CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner
func RegionIdAsCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner(v *RegionId) CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner {
	return CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner{
		RegionId: v,
	}
}

// SolarSystemIdAsCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner is a convenience function that returns SolarSystemId wrapped in CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner
func SolarSystemIdAsCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner(v *SolarSystemId) CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner {
	return CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner{
		SolarSystemId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConstellationId
	err = newStrictDecoder(data).Decode(&dst.ConstellationId)
	if err == nil {
		jsonConstellationId, _ := json.Marshal(dst.ConstellationId)
		if string(jsonConstellationId) == "{}" { // empty struct
			dst.ConstellationId = nil
		} else {
			if err = validator.Validate(dst.ConstellationId); err != nil {
				dst.ConstellationId = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConstellationId = nil
	}

	// try to unmarshal data into RegionId
	err = newStrictDecoder(data).Decode(&dst.RegionId)
	if err == nil {
		jsonRegionId, _ := json.Marshal(dst.RegionId)
		if string(jsonRegionId) == "{}" { // empty struct
			dst.RegionId = nil
		} else {
			if err = validator.Validate(dst.RegionId); err != nil {
				dst.RegionId = nil
			} else {
				match++
			}
		}
	} else {
		dst.RegionId = nil
	}

	// try to unmarshal data into SolarSystemId
	err = newStrictDecoder(data).Decode(&dst.SolarSystemId)
	if err == nil {
		jsonSolarSystemId, _ := json.Marshal(dst.SolarSystemId)
		if string(jsonSolarSystemId) == "{}" { // empty struct
			dst.SolarSystemId = nil
		} else {
			if err = validator.Validate(dst.SolarSystemId); err != nil {
				dst.SolarSystemId = nil
			} else {
				match++
			}
		}
	} else {
		dst.SolarSystemId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConstellationId = nil
		dst.RegionId = nil
		dst.SolarSystemId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) MarshalJSON() ([]byte, error) {
	if src.ConstellationId != nil {
		return json.Marshal(&src.ConstellationId)
	}

	if src.RegionId != nil {
		return json.Marshal(&src.RegionId)
	}

	if src.SolarSystemId != nil {
		return json.Marshal(&src.SolarSystemId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ConstellationId != nil {
		return obj.ConstellationId
	}

	if obj.RegionId != nil {
		return obj.RegionId
	}

	if obj.SolarSystemId != nil {
		return obj.SolarSystemId
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) GetActualInstanceValue() (interface{}) {
	if obj.ConstellationId != nil {
		return *obj.ConstellationId
	}

	if obj.RegionId != nil {
		return *obj.RegionId
	}

	if obj.SolarSystemId != nil {
		return *obj.SolarSystemId
	}

	// all schemas are nil
	return nil
}

type NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner struct {
	value *CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner
	isSet bool
}

func (v NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) Get() *CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner {
	return v.value
}

func (v *NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) Set(val *CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner(val *CorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) *NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner {
	return &NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner{value: val, isSet: true}
}

func (v NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsProjectsDetailConfigurationcapturefwcomplexLocationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


