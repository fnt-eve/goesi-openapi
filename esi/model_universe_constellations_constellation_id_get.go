/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UniverseConstellationsConstellationIdGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniverseConstellationsConstellationIdGet{}

// UniverseConstellationsConstellationIdGet struct for UniverseConstellationsConstellationIdGet
type UniverseConstellationsConstellationIdGet struct {
	ConstellationId int64 `json:"constellation_id"`
	Name string `json:"name"`
	Position CharactersCharacterIdAssetsLocationsPostInnerPosition `json:"position"`
	// The region this constellation is in
	RegionId int64 `json:"region_id"`
	Systems []int64 `json:"systems"`
}

type _UniverseConstellationsConstellationIdGet UniverseConstellationsConstellationIdGet

// NewUniverseConstellationsConstellationIdGet instantiates a new UniverseConstellationsConstellationIdGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseConstellationsConstellationIdGet(constellationId int64, name string, position CharactersCharacterIdAssetsLocationsPostInnerPosition, regionId int64, systems []int64) *UniverseConstellationsConstellationIdGet {
	this := UniverseConstellationsConstellationIdGet{}
	this.ConstellationId = constellationId
	this.Name = name
	this.Position = position
	this.RegionId = regionId
	this.Systems = systems
	return &this
}

// NewUniverseConstellationsConstellationIdGetWithDefaults instantiates a new UniverseConstellationsConstellationIdGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseConstellationsConstellationIdGetWithDefaults() *UniverseConstellationsConstellationIdGet {
	this := UniverseConstellationsConstellationIdGet{}
	return &this
}

// GetConstellationId returns the ConstellationId field value
func (o *UniverseConstellationsConstellationIdGet) GetConstellationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConstellationId
}

// GetConstellationIdOk returns a tuple with the ConstellationId field value
// and a boolean to check if the value has been set.
func (o *UniverseConstellationsConstellationIdGet) GetConstellationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConstellationId, true
}

// SetConstellationId sets field value
func (o *UniverseConstellationsConstellationIdGet) SetConstellationId(v int64) {
	o.ConstellationId = v
}

// GetName returns the Name field value
func (o *UniverseConstellationsConstellationIdGet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UniverseConstellationsConstellationIdGet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UniverseConstellationsConstellationIdGet) SetName(v string) {
	o.Name = v
}

// GetPosition returns the Position field value
func (o *UniverseConstellationsConstellationIdGet) GetPosition() CharactersCharacterIdAssetsLocationsPostInnerPosition {
	if o == nil {
		var ret CharactersCharacterIdAssetsLocationsPostInnerPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *UniverseConstellationsConstellationIdGet) GetPositionOk() (*CharactersCharacterIdAssetsLocationsPostInnerPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *UniverseConstellationsConstellationIdGet) SetPosition(v CharactersCharacterIdAssetsLocationsPostInnerPosition) {
	o.Position = v
}

// GetRegionId returns the RegionId field value
func (o *UniverseConstellationsConstellationIdGet) GetRegionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *UniverseConstellationsConstellationIdGet) GetRegionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *UniverseConstellationsConstellationIdGet) SetRegionId(v int64) {
	o.RegionId = v
}

// GetSystems returns the Systems field value
func (o *UniverseConstellationsConstellationIdGet) GetSystems() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Systems
}

// GetSystemsOk returns a tuple with the Systems field value
// and a boolean to check if the value has been set.
func (o *UniverseConstellationsConstellationIdGet) GetSystemsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Systems, true
}

// SetSystems sets field value
func (o *UniverseConstellationsConstellationIdGet) SetSystems(v []int64) {
	o.Systems = v
}

func (o UniverseConstellationsConstellationIdGet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniverseConstellationsConstellationIdGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["constellation_id"] = o.ConstellationId
	toSerialize["name"] = o.Name
	toSerialize["position"] = o.Position
	toSerialize["region_id"] = o.RegionId
	toSerialize["systems"] = o.Systems
	return toSerialize, nil
}

func (o *UniverseConstellationsConstellationIdGet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"constellation_id",
		"name",
		"position",
		"region_id",
		"systems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUniverseConstellationsConstellationIdGet := _UniverseConstellationsConstellationIdGet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUniverseConstellationsConstellationIdGet)

	if err != nil {
		return err
	}

	*o = UniverseConstellationsConstellationIdGet(varUniverseConstellationsConstellationIdGet)

	return err
}

type NullableUniverseConstellationsConstellationIdGet struct {
	value *UniverseConstellationsConstellationIdGet
	isSet bool
}

func (v NullableUniverseConstellationsConstellationIdGet) Get() *UniverseConstellationsConstellationIdGet {
	return v.value
}

func (v *NullableUniverseConstellationsConstellationIdGet) Set(val *UniverseConstellationsConstellationIdGet) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseConstellationsConstellationIdGet) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseConstellationsConstellationIdGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseConstellationsConstellationIdGet(val *UniverseConstellationsConstellationIdGet) *NullableUniverseConstellationsConstellationIdGet {
	return &NullableUniverseConstellationsConstellationIdGet{value: val, isSet: true}
}

func (v NullableUniverseConstellationsConstellationIdGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseConstellationsConstellationIdGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


