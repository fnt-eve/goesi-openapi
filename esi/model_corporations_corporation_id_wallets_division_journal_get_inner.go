/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CorporationsCorporationIdWalletsDivisionJournalGetInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorporationsCorporationIdWalletsDivisionJournalGetInner{}

// CorporationsCorporationIdWalletsDivisionJournalGetInner struct for CorporationsCorporationIdWalletsDivisionJournalGetInner
type CorporationsCorporationIdWalletsDivisionJournalGetInner struct {
	// The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
	Amount *float64 `json:"amount,omitempty"`
	// Wallet balance after transaction occurred
	Balance *float64 `json:"balance,omitempty"`
	// An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
	ContextId *int64 `json:"context_id,omitempty"`
	// The type of the given context_id if present
	ContextIdType *string `json:"context_id_type,omitempty"`
	// Date and time of transaction
	Date time.Time `json:"date"`
	// The reason for the transaction, mirrors what is seen in the client
	Description string `json:"description"`
	// The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
	FirstPartyId *int64 `json:"first_party_id,omitempty"`
	// Unique journal reference ID
	Id int64 `json:"id"`
	// The user stated reason for the transaction. Only applies to some ref_types
	Reason *string `json:"reason,omitempty"`
	// \"The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string->int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py\"
	RefType string `json:"ref_type"`
	// The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
	SecondPartyId *int64 `json:"second_party_id,omitempty"`
	// Tax amount received. Only applies to tax related transactions
	Tax *float64 `json:"tax,omitempty"`
	// The corporation ID receiving any tax paid. Only applies to tax related transactions
	TaxReceiverId *int64 `json:"tax_receiver_id,omitempty"`
}

type _CorporationsCorporationIdWalletsDivisionJournalGetInner CorporationsCorporationIdWalletsDivisionJournalGetInner

// NewCorporationsCorporationIdWalletsDivisionJournalGetInner instantiates a new CorporationsCorporationIdWalletsDivisionJournalGetInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporationsCorporationIdWalletsDivisionJournalGetInner(date time.Time, description string, id int64, refType string) *CorporationsCorporationIdWalletsDivisionJournalGetInner {
	this := CorporationsCorporationIdWalletsDivisionJournalGetInner{}
	this.Date = date
	this.Description = description
	this.Id = id
	this.RefType = refType
	return &this
}

// NewCorporationsCorporationIdWalletsDivisionJournalGetInnerWithDefaults instantiates a new CorporationsCorporationIdWalletsDivisionJournalGetInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporationsCorporationIdWalletsDivisionJournalGetInnerWithDefaults() *CorporationsCorporationIdWalletsDivisionJournalGetInner {
	this := CorporationsCorporationIdWalletsDivisionJournalGetInner{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetAmount(v float64) {
	o.Amount = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetBalance() float64 {
	if o == nil || IsNil(o.Balance) {
		var ret float64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float64 and assigns it to the Balance field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetBalance(v float64) {
	o.Balance = &v
}

// GetContextId returns the ContextId field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetContextId() int64 {
	if o == nil || IsNil(o.ContextId) {
		var ret int64
		return ret
	}
	return *o.ContextId
}

// GetContextIdOk returns a tuple with the ContextId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetContextIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ContextId) {
		return nil, false
	}
	return o.ContextId, true
}

// HasContextId returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasContextId() bool {
	if o != nil && !IsNil(o.ContextId) {
		return true
	}

	return false
}

// SetContextId gets a reference to the given int64 and assigns it to the ContextId field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetContextId(v int64) {
	o.ContextId = &v
}

// GetContextIdType returns the ContextIdType field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetContextIdType() string {
	if o == nil || IsNil(o.ContextIdType) {
		var ret string
		return ret
	}
	return *o.ContextIdType
}

// GetContextIdTypeOk returns a tuple with the ContextIdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetContextIdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContextIdType) {
		return nil, false
	}
	return o.ContextIdType, true
}

// HasContextIdType returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasContextIdType() bool {
	if o != nil && !IsNil(o.ContextIdType) {
		return true
	}

	return false
}

// SetContextIdType gets a reference to the given string and assigns it to the ContextIdType field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetContextIdType(v string) {
	o.ContextIdType = &v
}

// GetDate returns the Date field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetDate(v time.Time) {
	o.Date = v
}

// GetDescription returns the Description field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetDescription(v string) {
	o.Description = v
}

// GetFirstPartyId returns the FirstPartyId field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetFirstPartyId() int64 {
	if o == nil || IsNil(o.FirstPartyId) {
		var ret int64
		return ret
	}
	return *o.FirstPartyId
}

// GetFirstPartyIdOk returns a tuple with the FirstPartyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetFirstPartyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstPartyId) {
		return nil, false
	}
	return o.FirstPartyId, true
}

// HasFirstPartyId returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasFirstPartyId() bool {
	if o != nil && !IsNil(o.FirstPartyId) {
		return true
	}

	return false
}

// SetFirstPartyId gets a reference to the given int64 and assigns it to the FirstPartyId field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetFirstPartyId(v int64) {
	o.FirstPartyId = &v
}

// GetId returns the Id field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetId(v int64) {
	o.Id = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetReason(v string) {
	o.Reason = &v
}

// GetRefType returns the RefType field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetRefType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetRefTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefType, true
}

// SetRefType sets field value
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetRefType(v string) {
	o.RefType = v
}

// GetSecondPartyId returns the SecondPartyId field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetSecondPartyId() int64 {
	if o == nil || IsNil(o.SecondPartyId) {
		var ret int64
		return ret
	}
	return *o.SecondPartyId
}

// GetSecondPartyIdOk returns a tuple with the SecondPartyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetSecondPartyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SecondPartyId) {
		return nil, false
	}
	return o.SecondPartyId, true
}

// HasSecondPartyId returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasSecondPartyId() bool {
	if o != nil && !IsNil(o.SecondPartyId) {
		return true
	}

	return false
}

// SetSecondPartyId gets a reference to the given int64 and assigns it to the SecondPartyId field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetSecondPartyId(v int64) {
	o.SecondPartyId = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetTax() float64 {
	if o == nil || IsNil(o.Tax) {
		var ret float64
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float64 and assigns it to the Tax field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetTax(v float64) {
	o.Tax = &v
}

// GetTaxReceiverId returns the TaxReceiverId field value if set, zero value otherwise.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetTaxReceiverId() int64 {
	if o == nil || IsNil(o.TaxReceiverId) {
		var ret int64
		return ret
	}
	return *o.TaxReceiverId
}

// GetTaxReceiverIdOk returns a tuple with the TaxReceiverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) GetTaxReceiverIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TaxReceiverId) {
		return nil, false
	}
	return o.TaxReceiverId, true
}

// HasTaxReceiverId returns a boolean if a field has been set.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) HasTaxReceiverId() bool {
	if o != nil && !IsNil(o.TaxReceiverId) {
		return true
	}

	return false
}

// SetTaxReceiverId gets a reference to the given int64 and assigns it to the TaxReceiverId field.
func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) SetTaxReceiverId(v int64) {
	o.TaxReceiverId = &v
}

func (o CorporationsCorporationIdWalletsDivisionJournalGetInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorporationsCorporationIdWalletsDivisionJournalGetInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.ContextId) {
		toSerialize["context_id"] = o.ContextId
	}
	if !IsNil(o.ContextIdType) {
		toSerialize["context_id_type"] = o.ContextIdType
	}
	toSerialize["date"] = o.Date
	toSerialize["description"] = o.Description
	if !IsNil(o.FirstPartyId) {
		toSerialize["first_party_id"] = o.FirstPartyId
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["ref_type"] = o.RefType
	if !IsNil(o.SecondPartyId) {
		toSerialize["second_party_id"] = o.SecondPartyId
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.TaxReceiverId) {
		toSerialize["tax_receiver_id"] = o.TaxReceiverId
	}
	return toSerialize, nil
}

func (o *CorporationsCorporationIdWalletsDivisionJournalGetInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"description",
		"id",
		"ref_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorporationsCorporationIdWalletsDivisionJournalGetInner := _CorporationsCorporationIdWalletsDivisionJournalGetInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorporationsCorporationIdWalletsDivisionJournalGetInner)

	if err != nil {
		return err
	}

	*o = CorporationsCorporationIdWalletsDivisionJournalGetInner(varCorporationsCorporationIdWalletsDivisionJournalGetInner)

	return err
}

type NullableCorporationsCorporationIdWalletsDivisionJournalGetInner struct {
	value *CorporationsCorporationIdWalletsDivisionJournalGetInner
	isSet bool
}

func (v NullableCorporationsCorporationIdWalletsDivisionJournalGetInner) Get() *CorporationsCorporationIdWalletsDivisionJournalGetInner {
	return v.value
}

func (v *NullableCorporationsCorporationIdWalletsDivisionJournalGetInner) Set(val *CorporationsCorporationIdWalletsDivisionJournalGetInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporationsCorporationIdWalletsDivisionJournalGetInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporationsCorporationIdWalletsDivisionJournalGetInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporationsCorporationIdWalletsDivisionJournalGetInner(val *CorporationsCorporationIdWalletsDivisionJournalGetInner) *NullableCorporationsCorporationIdWalletsDivisionJournalGetInner {
	return &NullableCorporationsCorporationIdWalletsDivisionJournalGetInner{value: val, isSet: true}
}

func (v NullableCorporationsCorporationIdWalletsDivisionJournalGetInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporationsCorporationIdWalletsDivisionJournalGetInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


