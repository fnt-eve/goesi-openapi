/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WarsWarIdGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarsWarIdGet{}

// WarsWarIdGet struct for WarsWarIdGet
type WarsWarIdGet struct {
	Aggressor WarsWarIdGetAggressor `json:"aggressor"`
	// allied corporations or alliances, each object contains either corporation_id or alliance_id
	Allies []WarsWarIdGetAlliesInner `json:"allies,omitempty"`
	// Time that the war was declared
	Declared time.Time `json:"declared"`
	Defender WarsWarIdGetDefender `json:"defender"`
	// Time the war ended and shooting was no longer allowed
	Finished *time.Time `json:"finished,omitempty"`
	// ID of the specified war
	Id int64 `json:"id"`
	// Was the war declared mutual by both parties
	Mutual bool `json:"mutual"`
	// Is the war currently open for allies or not
	OpenForAllies bool `json:"open_for_allies"`
	// Time the war was retracted but both sides could still shoot each other
	Retracted *time.Time `json:"retracted,omitempty"`
	// Time when the war started and both sides could shoot each other
	Started *time.Time `json:"started,omitempty"`
}

type _WarsWarIdGet WarsWarIdGet

// NewWarsWarIdGet instantiates a new WarsWarIdGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarsWarIdGet(aggressor WarsWarIdGetAggressor, declared time.Time, defender WarsWarIdGetDefender, id int64, mutual bool, openForAllies bool) *WarsWarIdGet {
	this := WarsWarIdGet{}
	this.Aggressor = aggressor
	this.Declared = declared
	this.Defender = defender
	this.Id = id
	this.Mutual = mutual
	this.OpenForAllies = openForAllies
	return &this
}

// NewWarsWarIdGetWithDefaults instantiates a new WarsWarIdGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarsWarIdGetWithDefaults() *WarsWarIdGet {
	this := WarsWarIdGet{}
	return &this
}

// GetAggressor returns the Aggressor field value
func (o *WarsWarIdGet) GetAggressor() WarsWarIdGetAggressor {
	if o == nil {
		var ret WarsWarIdGetAggressor
		return ret
	}

	return o.Aggressor
}

// GetAggressorOk returns a tuple with the Aggressor field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetAggressorOk() (*WarsWarIdGetAggressor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggressor, true
}

// SetAggressor sets field value
func (o *WarsWarIdGet) SetAggressor(v WarsWarIdGetAggressor) {
	o.Aggressor = v
}

// GetAllies returns the Allies field value if set, zero value otherwise.
func (o *WarsWarIdGet) GetAllies() []WarsWarIdGetAlliesInner {
	if o == nil || IsNil(o.Allies) {
		var ret []WarsWarIdGetAlliesInner
		return ret
	}
	return o.Allies
}

// GetAlliesOk returns a tuple with the Allies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetAlliesOk() ([]WarsWarIdGetAlliesInner, bool) {
	if o == nil || IsNil(o.Allies) {
		return nil, false
	}
	return o.Allies, true
}

// HasAllies returns a boolean if a field has been set.
func (o *WarsWarIdGet) HasAllies() bool {
	if o != nil && !IsNil(o.Allies) {
		return true
	}

	return false
}

// SetAllies gets a reference to the given []WarsWarIdGetAlliesInner and assigns it to the Allies field.
func (o *WarsWarIdGet) SetAllies(v []WarsWarIdGetAlliesInner) {
	o.Allies = v
}

// GetDeclared returns the Declared field value
func (o *WarsWarIdGet) GetDeclared() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Declared
}

// GetDeclaredOk returns a tuple with the Declared field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetDeclaredOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Declared, true
}

// SetDeclared sets field value
func (o *WarsWarIdGet) SetDeclared(v time.Time) {
	o.Declared = v
}

// GetDefender returns the Defender field value
func (o *WarsWarIdGet) GetDefender() WarsWarIdGetDefender {
	if o == nil {
		var ret WarsWarIdGetDefender
		return ret
	}

	return o.Defender
}

// GetDefenderOk returns a tuple with the Defender field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetDefenderOk() (*WarsWarIdGetDefender, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Defender, true
}

// SetDefender sets field value
func (o *WarsWarIdGet) SetDefender(v WarsWarIdGetDefender) {
	o.Defender = v
}

// GetFinished returns the Finished field value if set, zero value otherwise.
func (o *WarsWarIdGet) GetFinished() time.Time {
	if o == nil || IsNil(o.Finished) {
		var ret time.Time
		return ret
	}
	return *o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetFinishedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Finished) {
		return nil, false
	}
	return o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *WarsWarIdGet) HasFinished() bool {
	if o != nil && !IsNil(o.Finished) {
		return true
	}

	return false
}

// SetFinished gets a reference to the given time.Time and assigns it to the Finished field.
func (o *WarsWarIdGet) SetFinished(v time.Time) {
	o.Finished = &v
}

// GetId returns the Id field value
func (o *WarsWarIdGet) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WarsWarIdGet) SetId(v int64) {
	o.Id = v
}

// GetMutual returns the Mutual field value
func (o *WarsWarIdGet) GetMutual() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Mutual
}

// GetMutualOk returns a tuple with the Mutual field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetMutualOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mutual, true
}

// SetMutual sets field value
func (o *WarsWarIdGet) SetMutual(v bool) {
	o.Mutual = v
}

// GetOpenForAllies returns the OpenForAllies field value
func (o *WarsWarIdGet) GetOpenForAllies() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OpenForAllies
}

// GetOpenForAlliesOk returns a tuple with the OpenForAllies field value
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetOpenForAlliesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenForAllies, true
}

// SetOpenForAllies sets field value
func (o *WarsWarIdGet) SetOpenForAllies(v bool) {
	o.OpenForAllies = v
}

// GetRetracted returns the Retracted field value if set, zero value otherwise.
func (o *WarsWarIdGet) GetRetracted() time.Time {
	if o == nil || IsNil(o.Retracted) {
		var ret time.Time
		return ret
	}
	return *o.Retracted
}

// GetRetractedOk returns a tuple with the Retracted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetRetractedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Retracted) {
		return nil, false
	}
	return o.Retracted, true
}

// HasRetracted returns a boolean if a field has been set.
func (o *WarsWarIdGet) HasRetracted() bool {
	if o != nil && !IsNil(o.Retracted) {
		return true
	}

	return false
}

// SetRetracted gets a reference to the given time.Time and assigns it to the Retracted field.
func (o *WarsWarIdGet) SetRetracted(v time.Time) {
	o.Retracted = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *WarsWarIdGet) GetStarted() time.Time {
	if o == nil || IsNil(o.Started) {
		var ret time.Time
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarsWarIdGet) GetStartedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *WarsWarIdGet) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given time.Time and assigns it to the Started field.
func (o *WarsWarIdGet) SetStarted(v time.Time) {
	o.Started = &v
}

func (o WarsWarIdGet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarsWarIdGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggressor"] = o.Aggressor
	if !IsNil(o.Allies) {
		toSerialize["allies"] = o.Allies
	}
	toSerialize["declared"] = o.Declared
	toSerialize["defender"] = o.Defender
	if !IsNil(o.Finished) {
		toSerialize["finished"] = o.Finished
	}
	toSerialize["id"] = o.Id
	toSerialize["mutual"] = o.Mutual
	toSerialize["open_for_allies"] = o.OpenForAllies
	if !IsNil(o.Retracted) {
		toSerialize["retracted"] = o.Retracted
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	return toSerialize, nil
}

func (o *WarsWarIdGet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggressor",
		"declared",
		"defender",
		"id",
		"mutual",
		"open_for_allies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWarsWarIdGet := _WarsWarIdGet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWarsWarIdGet)

	if err != nil {
		return err
	}

	*o = WarsWarIdGet(varWarsWarIdGet)

	return err
}

type NullableWarsWarIdGet struct {
	value *WarsWarIdGet
	isSet bool
}

func (v NullableWarsWarIdGet) Get() *WarsWarIdGet {
	return v.value
}

func (v *NullableWarsWarIdGet) Set(val *WarsWarIdGet) {
	v.value = val
	v.isSet = true
}

func (v NullableWarsWarIdGet) IsSet() bool {
	return v.isSet
}

func (v *NullableWarsWarIdGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarsWarIdGet(val *WarsWarIdGet) *NullableWarsWarIdGet {
	return &NullableWarsWarIdGet{value: val, isSet: true}
}

func (v NullableWarsWarIdGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarsWarIdGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


