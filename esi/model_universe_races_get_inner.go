/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UniverseRacesGetInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniverseRacesGetInner{}

// UniverseRacesGetInner struct for UniverseRacesGetInner
type UniverseRacesGetInner struct {
	// The alliance generally associated with this race
	AllianceId int64 `json:"alliance_id"`
	Description string `json:"description"`
	Name string `json:"name"`
	RaceId int64 `json:"race_id"`
}

type _UniverseRacesGetInner UniverseRacesGetInner

// NewUniverseRacesGetInner instantiates a new UniverseRacesGetInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseRacesGetInner(allianceId int64, description string, name string, raceId int64) *UniverseRacesGetInner {
	this := UniverseRacesGetInner{}
	this.AllianceId = allianceId
	this.Description = description
	this.Name = name
	this.RaceId = raceId
	return &this
}

// NewUniverseRacesGetInnerWithDefaults instantiates a new UniverseRacesGetInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseRacesGetInnerWithDefaults() *UniverseRacesGetInner {
	this := UniverseRacesGetInner{}
	return &this
}

// GetAllianceId returns the AllianceId field value
func (o *UniverseRacesGetInner) GetAllianceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllianceId
}

// GetAllianceIdOk returns a tuple with the AllianceId field value
// and a boolean to check if the value has been set.
func (o *UniverseRacesGetInner) GetAllianceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllianceId, true
}

// SetAllianceId sets field value
func (o *UniverseRacesGetInner) SetAllianceId(v int64) {
	o.AllianceId = v
}

// GetDescription returns the Description field value
func (o *UniverseRacesGetInner) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UniverseRacesGetInner) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UniverseRacesGetInner) SetDescription(v string) {
	o.Description = v
}

// GetName returns the Name field value
func (o *UniverseRacesGetInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UniverseRacesGetInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UniverseRacesGetInner) SetName(v string) {
	o.Name = v
}

// GetRaceId returns the RaceId field value
func (o *UniverseRacesGetInner) GetRaceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RaceId
}

// GetRaceIdOk returns a tuple with the RaceId field value
// and a boolean to check if the value has been set.
func (o *UniverseRacesGetInner) GetRaceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RaceId, true
}

// SetRaceId sets field value
func (o *UniverseRacesGetInner) SetRaceId(v int64) {
	o.RaceId = v
}

func (o UniverseRacesGetInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniverseRacesGetInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alliance_id"] = o.AllianceId
	toSerialize["description"] = o.Description
	toSerialize["name"] = o.Name
	toSerialize["race_id"] = o.RaceId
	return toSerialize, nil
}

func (o *UniverseRacesGetInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alliance_id",
		"description",
		"name",
		"race_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUniverseRacesGetInner := _UniverseRacesGetInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUniverseRacesGetInner)

	if err != nil {
		return err
	}

	*o = UniverseRacesGetInner(varUniverseRacesGetInner)

	return err
}

type NullableUniverseRacesGetInner struct {
	value *UniverseRacesGetInner
	isSet bool
}

func (v NullableUniverseRacesGetInner) Get() *UniverseRacesGetInner {
	return v.value
}

func (v *NullableUniverseRacesGetInner) Set(val *UniverseRacesGetInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseRacesGetInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseRacesGetInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseRacesGetInner(val *UniverseRacesGetInner) *NullableUniverseRacesGetInner {
	return &NullableUniverseRacesGetInner{value: val, isSet: true}
}

func (v NullableUniverseRacesGetInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseRacesGetInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


