/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
)

// checks if the Manual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Manual{}

// Manual struct for Manual
type Manual struct {
	Manual map[string]interface{} `json:"manual,omitempty"`
}

// NewManual instantiates a new Manual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManual() *Manual {
	this := Manual{}
	return &this
}

// NewManualWithDefaults instantiates a new Manual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualWithDefaults() *Manual {
	this := Manual{}
	return &this
}

// GetManual returns the Manual field value if set, zero value otherwise.
func (o *Manual) GetManual() map[string]interface{} {
	if o == nil || IsNil(o.Manual) {
		var ret map[string]interface{}
		return ret
	}
	return o.Manual
}

// GetManualOk returns a tuple with the Manual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Manual) GetManualOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Manual) {
		return map[string]interface{}{}, false
	}
	return o.Manual, true
}

// HasManual returns a boolean if a field has been set.
func (o *Manual) HasManual() bool {
	if o != nil && !IsNil(o.Manual) {
		return true
	}

	return false
}

// SetManual gets a reference to the given map[string]interface{} and assigns it to the Manual field.
func (o *Manual) SetManual(v map[string]interface{}) {
	o.Manual = v
}

func (o Manual) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Manual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Manual) {
		toSerialize["manual"] = o.Manual
	}
	return toSerialize, nil
}

type NullableManual struct {
	value *Manual
	isSet bool
}

func (v NullableManual) Get() *Manual {
	return v.value
}

func (v *NullableManual) Set(val *Manual) {
	v.value = val
	v.isSet = true
}

func (v NullableManual) IsSet() bool {
	return v.isSet
}

func (v *NullableManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManual(val *Manual) *NullableManual {
	return &NullableManual{value: val, isSet: true}
}

func (v NullableManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


