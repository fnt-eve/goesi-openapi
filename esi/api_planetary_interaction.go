/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PlanetaryInteractionAPI interface {

	/*
	GetCharactersCharacterIdPlanets Get colonies

	Returns a list of all planetary colonies owned by a character.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@return ApiGetCharactersCharacterIdPlanetsRequest
	*/
	GetCharactersCharacterIdPlanets(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdPlanetsRequest

	// GetCharactersCharacterIdPlanetsExecute executes the request
	//  @return []CharactersCharacterIdPlanetsGetInner
	GetCharactersCharacterIdPlanetsExecute(r ApiGetCharactersCharacterIdPlanetsRequest) ([]CharactersCharacterIdPlanetsGetInner, *http.Response, error)

	/*
	GetCharactersCharacterIdPlanetsPlanetId Get colony layout

	Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param characterId The ID of the character
	@param planetId
	@return ApiGetCharactersCharacterIdPlanetsPlanetIdRequest
	*/
	GetCharactersCharacterIdPlanetsPlanetId(ctx context.Context, characterId int64, planetId int64) ApiGetCharactersCharacterIdPlanetsPlanetIdRequest

	// GetCharactersCharacterIdPlanetsPlanetIdExecute executes the request
	//  @return CharactersCharacterIdPlanetsPlanetIdGet
	GetCharactersCharacterIdPlanetsPlanetIdExecute(r ApiGetCharactersCharacterIdPlanetsPlanetIdRequest) (*CharactersCharacterIdPlanetsPlanetIdGet, *http.Response, error)

	/*
	GetCorporationsCorporationIdCustomsOffices List corporation customs offices

	List customs offices owned by a corporation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param corporationId The ID of the corporation
	@return ApiGetCorporationsCorporationIdCustomsOfficesRequest
	*/
	GetCorporationsCorporationIdCustomsOffices(ctx context.Context, corporationId int64) ApiGetCorporationsCorporationIdCustomsOfficesRequest

	// GetCorporationsCorporationIdCustomsOfficesExecute executes the request
	//  @return []CorporationsCorporationIdCustomsOfficesGetInner
	GetCorporationsCorporationIdCustomsOfficesExecute(r ApiGetCorporationsCorporationIdCustomsOfficesRequest) ([]CorporationsCorporationIdCustomsOfficesGetInner, *http.Response, error)

	/*
	GetUniverseSchematicsSchematicId Get schematic information

	Get information on a planetary factory schematic

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param schematicId
	@return ApiGetUniverseSchematicsSchematicIdRequest
	*/
	GetUniverseSchematicsSchematicId(ctx context.Context, schematicId int64) ApiGetUniverseSchematicsSchematicIdRequest

	// GetUniverseSchematicsSchematicIdExecute executes the request
	//  @return UniverseSchematicsSchematicIdGet
	GetUniverseSchematicsSchematicIdExecute(r ApiGetUniverseSchematicsSchematicIdRequest) (*UniverseSchematicsSchematicIdGet, *http.Response, error)
}

// PlanetaryInteractionAPIService PlanetaryInteractionAPI service
type PlanetaryInteractionAPIService service

type ApiGetCharactersCharacterIdPlanetsRequest struct {
	ctx context.Context
	ApiService PlanetaryInteractionAPI
	characterId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdPlanetsRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdPlanetsRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdPlanetsRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdPlanetsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdPlanetsRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdPlanetsRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdPlanetsRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdPlanetsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdPlanetsRequest) Execute() ([]CharactersCharacterIdPlanetsGetInner, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdPlanetsExecute(r)
}

/*
GetCharactersCharacterIdPlanets Get colonies

Returns a list of all planetary colonies owned by a character.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @return ApiGetCharactersCharacterIdPlanetsRequest
*/
func (a *PlanetaryInteractionAPIService) GetCharactersCharacterIdPlanets(ctx context.Context, characterId int64) ApiGetCharactersCharacterIdPlanetsRequest {
	return ApiGetCharactersCharacterIdPlanetsRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
	}
}

// Execute executes the request
//  @return []CharactersCharacterIdPlanetsGetInner
func (a *PlanetaryInteractionAPIService) GetCharactersCharacterIdPlanetsExecute(r ApiGetCharactersCharacterIdPlanetsRequest) ([]CharactersCharacterIdPlanetsGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CharactersCharacterIdPlanetsGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlanetaryInteractionAPIService.GetCharactersCharacterIdPlanets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/planets"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCharactersCharacterIdPlanetsPlanetIdRequest struct {
	ctx context.Context
	ApiService PlanetaryInteractionAPI
	characterId int64
	planetId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCharactersCharacterIdPlanetsPlanetIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCharactersCharacterIdPlanetsPlanetIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetCharactersCharacterIdPlanetsPlanetIdRequest) AcceptLanguage(acceptLanguage string) ApiGetCharactersCharacterIdPlanetsPlanetIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCharactersCharacterIdPlanetsPlanetIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetCharactersCharacterIdPlanetsPlanetIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCharactersCharacterIdPlanetsPlanetIdRequest) XTenant(xTenant string) ApiGetCharactersCharacterIdPlanetsPlanetIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCharactersCharacterIdPlanetsPlanetIdRequest) Execute() (*CharactersCharacterIdPlanetsPlanetIdGet, *http.Response, error) {
	return r.ApiService.GetCharactersCharacterIdPlanetsPlanetIdExecute(r)
}

/*
GetCharactersCharacterIdPlanetsPlanetId Get colony layout

Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param characterId The ID of the character
 @param planetId
 @return ApiGetCharactersCharacterIdPlanetsPlanetIdRequest
*/
func (a *PlanetaryInteractionAPIService) GetCharactersCharacterIdPlanetsPlanetId(ctx context.Context, characterId int64, planetId int64) ApiGetCharactersCharacterIdPlanetsPlanetIdRequest {
	return ApiGetCharactersCharacterIdPlanetsPlanetIdRequest{
		ApiService: a,
		ctx: ctx,
		characterId: characterId,
		planetId: planetId,
	}
}

// Execute executes the request
//  @return CharactersCharacterIdPlanetsPlanetIdGet
func (a *PlanetaryInteractionAPIService) GetCharactersCharacterIdPlanetsPlanetIdExecute(r ApiGetCharactersCharacterIdPlanetsPlanetIdRequest) (*CharactersCharacterIdPlanetsPlanetIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CharactersCharacterIdPlanetsPlanetIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlanetaryInteractionAPIService.GetCharactersCharacterIdPlanetsPlanetId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{character_id}/planets/{planet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"character_id"+"}", url.PathEscape(parameterValueToString(r.characterId, "characterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"planet_id"+"}", url.PathEscape(parameterValueToString(r.planetId, "planetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCorporationsCorporationIdCustomsOfficesRequest struct {
	ctx context.Context
	ApiService PlanetaryInteractionAPI
	corporationId int64
	xCompatibilityDate *string
	page *int32
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetCorporationsCorporationIdCustomsOfficesRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetCorporationsCorporationIdCustomsOfficesRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

func (r ApiGetCorporationsCorporationIdCustomsOfficesRequest) Page(page int32) ApiGetCorporationsCorporationIdCustomsOfficesRequest {
	r.page = &page
	return r
}

// The language to use for the response.
func (r ApiGetCorporationsCorporationIdCustomsOfficesRequest) AcceptLanguage(acceptLanguage string) ApiGetCorporationsCorporationIdCustomsOfficesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetCorporationsCorporationIdCustomsOfficesRequest) IfNoneMatch(ifNoneMatch string) ApiGetCorporationsCorporationIdCustomsOfficesRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetCorporationsCorporationIdCustomsOfficesRequest) XTenant(xTenant string) ApiGetCorporationsCorporationIdCustomsOfficesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetCorporationsCorporationIdCustomsOfficesRequest) Execute() ([]CorporationsCorporationIdCustomsOfficesGetInner, *http.Response, error) {
	return r.ApiService.GetCorporationsCorporationIdCustomsOfficesExecute(r)
}

/*
GetCorporationsCorporationIdCustomsOffices List corporation customs offices

List customs offices owned by a corporation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param corporationId The ID of the corporation
 @return ApiGetCorporationsCorporationIdCustomsOfficesRequest
*/
func (a *PlanetaryInteractionAPIService) GetCorporationsCorporationIdCustomsOffices(ctx context.Context, corporationId int64) ApiGetCorporationsCorporationIdCustomsOfficesRequest {
	return ApiGetCorporationsCorporationIdCustomsOfficesRequest{
		ApiService: a,
		ctx: ctx,
		corporationId: corporationId,
	}
}

// Execute executes the request
//  @return []CorporationsCorporationIdCustomsOfficesGetInner
func (a *PlanetaryInteractionAPIService) GetCorporationsCorporationIdCustomsOfficesExecute(r ApiGetCorporationsCorporationIdCustomsOfficesRequest) ([]CorporationsCorporationIdCustomsOfficesGetInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CorporationsCorporationIdCustomsOfficesGetInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlanetaryInteractionAPIService.GetCorporationsCorporationIdCustomsOffices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/corporations/{corporation_id}/customs_offices"
	localVarPath = strings.Replace(localVarPath, "{"+"corporation_id"+"}", url.PathEscape(parameterValueToString(r.corporationId, "corporationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUniverseSchematicsSchematicIdRequest struct {
	ctx context.Context
	ApiService PlanetaryInteractionAPI
	schematicId int64
	xCompatibilityDate *string
	acceptLanguage *string
	ifNoneMatch *string
	xTenant *string
}

// The compatibility date for the request.
func (r ApiGetUniverseSchematicsSchematicIdRequest) XCompatibilityDate(xCompatibilityDate string) ApiGetUniverseSchematicsSchematicIdRequest {
	r.xCompatibilityDate = &xCompatibilityDate
	return r
}

// The language to use for the response.
func (r ApiGetUniverseSchematicsSchematicIdRequest) AcceptLanguage(acceptLanguage string) ApiGetUniverseSchematicsSchematicIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The ETag of the previous request. A 304 will be returned if this matches the current ETag.
func (r ApiGetUniverseSchematicsSchematicIdRequest) IfNoneMatch(ifNoneMatch string) ApiGetUniverseSchematicsSchematicIdRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

// The tenant ID for the request.
func (r ApiGetUniverseSchematicsSchematicIdRequest) XTenant(xTenant string) ApiGetUniverseSchematicsSchematicIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiGetUniverseSchematicsSchematicIdRequest) Execute() (*UniverseSchematicsSchematicIdGet, *http.Response, error) {
	return r.ApiService.GetUniverseSchematicsSchematicIdExecute(r)
}

/*
GetUniverseSchematicsSchematicId Get schematic information

Get information on a planetary factory schematic

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param schematicId
 @return ApiGetUniverseSchematicsSchematicIdRequest
*/
func (a *PlanetaryInteractionAPIService) GetUniverseSchematicsSchematicId(ctx context.Context, schematicId int64) ApiGetUniverseSchematicsSchematicIdRequest {
	return ApiGetUniverseSchematicsSchematicIdRequest{
		ApiService: a,
		ctx: ctx,
		schematicId: schematicId,
	}
}

// Execute executes the request
//  @return UniverseSchematicsSchematicIdGet
func (a *PlanetaryInteractionAPIService) GetUniverseSchematicsSchematicIdExecute(r ApiGetUniverseSchematicsSchematicIdRequest) (*UniverseSchematicsSchematicIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UniverseSchematicsSchematicIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlanetaryInteractionAPIService.GetUniverseSchematicsSchematicId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/universe/schematics/{schematic_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"schematic_id"+"}", url.PathEscape(parameterValueToString(r.schematicId, "schematicId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xCompatibilityDate == nil {
		r.xCompatibilityDate = &a.client.cfg.CompatibilityDate
	}
	// Removed original error check - now using configuration default value
	if false {
		return localVarReturnValue, nil, reportError("xCompatibilityDate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ifNoneMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-None-Match", r.ifNoneMatch, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Compatibility-Date", r.xCompatibilityDate, "simple", "")
	if r.xTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
