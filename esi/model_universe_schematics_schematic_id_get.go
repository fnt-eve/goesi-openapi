/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UniverseSchematicsSchematicIdGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniverseSchematicsSchematicIdGet{}

// UniverseSchematicsSchematicIdGet struct for UniverseSchematicsSchematicIdGet
type UniverseSchematicsSchematicIdGet struct {
	// Time in seconds to process a run
	CycleTime int64 `json:"cycle_time"`
	SchematicName string `json:"schematic_name"`
}

type _UniverseSchematicsSchematicIdGet UniverseSchematicsSchematicIdGet

// NewUniverseSchematicsSchematicIdGet instantiates a new UniverseSchematicsSchematicIdGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseSchematicsSchematicIdGet(cycleTime int64, schematicName string) *UniverseSchematicsSchematicIdGet {
	this := UniverseSchematicsSchematicIdGet{}
	this.CycleTime = cycleTime
	this.SchematicName = schematicName
	return &this
}

// NewUniverseSchematicsSchematicIdGetWithDefaults instantiates a new UniverseSchematicsSchematicIdGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseSchematicsSchematicIdGetWithDefaults() *UniverseSchematicsSchematicIdGet {
	this := UniverseSchematicsSchematicIdGet{}
	return &this
}

// GetCycleTime returns the CycleTime field value
func (o *UniverseSchematicsSchematicIdGet) GetCycleTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CycleTime
}

// GetCycleTimeOk returns a tuple with the CycleTime field value
// and a boolean to check if the value has been set.
func (o *UniverseSchematicsSchematicIdGet) GetCycleTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CycleTime, true
}

// SetCycleTime sets field value
func (o *UniverseSchematicsSchematicIdGet) SetCycleTime(v int64) {
	o.CycleTime = v
}

// GetSchematicName returns the SchematicName field value
func (o *UniverseSchematicsSchematicIdGet) GetSchematicName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchematicName
}

// GetSchematicNameOk returns a tuple with the SchematicName field value
// and a boolean to check if the value has been set.
func (o *UniverseSchematicsSchematicIdGet) GetSchematicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchematicName, true
}

// SetSchematicName sets field value
func (o *UniverseSchematicsSchematicIdGet) SetSchematicName(v string) {
	o.SchematicName = v
}

func (o UniverseSchematicsSchematicIdGet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniverseSchematicsSchematicIdGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cycle_time"] = o.CycleTime
	toSerialize["schematic_name"] = o.SchematicName
	return toSerialize, nil
}

func (o *UniverseSchematicsSchematicIdGet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cycle_time",
		"schematic_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUniverseSchematicsSchematicIdGet := _UniverseSchematicsSchematicIdGet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUniverseSchematicsSchematicIdGet)

	if err != nil {
		return err
	}

	*o = UniverseSchematicsSchematicIdGet(varUniverseSchematicsSchematicIdGet)

	return err
}

type NullableUniverseSchematicsSchematicIdGet struct {
	value *UniverseSchematicsSchematicIdGet
	isSet bool
}

func (v NullableUniverseSchematicsSchematicIdGet) Get() *UniverseSchematicsSchematicIdGet {
	return v.value
}

func (v *NullableUniverseSchematicsSchematicIdGet) Set(val *UniverseSchematicsSchematicIdGet) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseSchematicsSchematicIdGet) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseSchematicsSchematicIdGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseSchematicsSchematicIdGet(val *UniverseSchematicsSchematicIdGet) *NullableUniverseSchematicsSchematicIdGet {
	return &NullableUniverseSchematicsSchematicIdGet{value: val, isSet: true}
}

func (v NullableUniverseSchematicsSchematicIdGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseSchematicsSchematicIdGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


