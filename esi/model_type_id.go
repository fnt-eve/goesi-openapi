/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
)

// checks if the TypeId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypeId{}

// TypeId struct for TypeId
type TypeId struct {
	TypeId *int64 `json:"type_id,omitempty"`
}

// NewTypeId instantiates a new TypeId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeId() *TypeId {
	this := TypeId{}
	return &this
}

// NewTypeIdWithDefaults instantiates a new TypeId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeIdWithDefaults() *TypeId {
	this := TypeId{}
	return &this
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *TypeId) GetTypeId() int64 {
	if o == nil || IsNil(o.TypeId) {
		var ret int64
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeId) GetTypeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TypeId) {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *TypeId) HasTypeId() bool {
	if o != nil && !IsNil(o.TypeId) {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given int64 and assigns it to the TypeId field.
func (o *TypeId) SetTypeId(v int64) {
	o.TypeId = &v
}

func (o TypeId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypeId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TypeId) {
		toSerialize["type_id"] = o.TypeId
	}
	return toSerialize, nil
}

type NullableTypeId struct {
	value *TypeId
	isSet bool
}

func (v NullableTypeId) Get() *TypeId {
	return v.value
}

func (v *NullableTypeId) Set(val *TypeId) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeId) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeId(val *TypeId) *NullableTypeId {
	return &NullableTypeId{value: val, isSet: true}
}

func (v NullableTypeId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


