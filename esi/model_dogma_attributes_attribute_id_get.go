/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DogmaAttributesAttributeIdGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DogmaAttributesAttributeIdGet{}

// DogmaAttributesAttributeIdGet struct for DogmaAttributesAttributeIdGet
type DogmaAttributesAttributeIdGet struct {
	AttributeId int64 `json:"attribute_id"`
	DefaultValue *float64 `json:"default_value,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	HighIsGood *bool `json:"high_is_good,omitempty"`
	IconId *int64 `json:"icon_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Published *bool `json:"published,omitempty"`
	Stackable *bool `json:"stackable,omitempty"`
	UnitId *int64 `json:"unit_id,omitempty"`
}

type _DogmaAttributesAttributeIdGet DogmaAttributesAttributeIdGet

// NewDogmaAttributesAttributeIdGet instantiates a new DogmaAttributesAttributeIdGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDogmaAttributesAttributeIdGet(attributeId int64) *DogmaAttributesAttributeIdGet {
	this := DogmaAttributesAttributeIdGet{}
	this.AttributeId = attributeId
	return &this
}

// NewDogmaAttributesAttributeIdGetWithDefaults instantiates a new DogmaAttributesAttributeIdGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDogmaAttributesAttributeIdGetWithDefaults() *DogmaAttributesAttributeIdGet {
	this := DogmaAttributesAttributeIdGet{}
	return &this
}

// GetAttributeId returns the AttributeId field value
func (o *DogmaAttributesAttributeIdGet) GetAttributeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AttributeId
}

// GetAttributeIdOk returns a tuple with the AttributeId field value
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetAttributeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeId, true
}

// SetAttributeId sets field value
func (o *DogmaAttributesAttributeIdGet) SetAttributeId(v int64) {
	o.AttributeId = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetDefaultValue() float64 {
	if o == nil || IsNil(o.DefaultValue) {
		var ret float64
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetDefaultValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given float64 and assigns it to the DefaultValue field.
func (o *DogmaAttributesAttributeIdGet) SetDefaultValue(v float64) {
	o.DefaultValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DogmaAttributesAttributeIdGet) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DogmaAttributesAttributeIdGet) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHighIsGood returns the HighIsGood field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetHighIsGood() bool {
	if o == nil || IsNil(o.HighIsGood) {
		var ret bool
		return ret
	}
	return *o.HighIsGood
}

// GetHighIsGoodOk returns a tuple with the HighIsGood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetHighIsGoodOk() (*bool, bool) {
	if o == nil || IsNil(o.HighIsGood) {
		return nil, false
	}
	return o.HighIsGood, true
}

// HasHighIsGood returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasHighIsGood() bool {
	if o != nil && !IsNil(o.HighIsGood) {
		return true
	}

	return false
}

// SetHighIsGood gets a reference to the given bool and assigns it to the HighIsGood field.
func (o *DogmaAttributesAttributeIdGet) SetHighIsGood(v bool) {
	o.HighIsGood = &v
}

// GetIconId returns the IconId field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetIconId() int64 {
	if o == nil || IsNil(o.IconId) {
		var ret int64
		return ret
	}
	return *o.IconId
}

// GetIconIdOk returns a tuple with the IconId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetIconIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IconId) {
		return nil, false
	}
	return o.IconId, true
}

// HasIconId returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasIconId() bool {
	if o != nil && !IsNil(o.IconId) {
		return true
	}

	return false
}

// SetIconId gets a reference to the given int64 and assigns it to the IconId field.
func (o *DogmaAttributesAttributeIdGet) SetIconId(v int64) {
	o.IconId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DogmaAttributesAttributeIdGet) SetName(v string) {
	o.Name = &v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetPublished() bool {
	if o == nil || IsNil(o.Published) {
		var ret bool
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Published) {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasPublished() bool {
	if o != nil && !IsNil(o.Published) {
		return true
	}

	return false
}

// SetPublished gets a reference to the given bool and assigns it to the Published field.
func (o *DogmaAttributesAttributeIdGet) SetPublished(v bool) {
	o.Published = &v
}

// GetStackable returns the Stackable field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetStackable() bool {
	if o == nil || IsNil(o.Stackable) {
		var ret bool
		return ret
	}
	return *o.Stackable
}

// GetStackableOk returns a tuple with the Stackable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetStackableOk() (*bool, bool) {
	if o == nil || IsNil(o.Stackable) {
		return nil, false
	}
	return o.Stackable, true
}

// HasStackable returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasStackable() bool {
	if o != nil && !IsNil(o.Stackable) {
		return true
	}

	return false
}

// SetStackable gets a reference to the given bool and assigns it to the Stackable field.
func (o *DogmaAttributesAttributeIdGet) SetStackable(v bool) {
	o.Stackable = &v
}

// GetUnitId returns the UnitId field value if set, zero value otherwise.
func (o *DogmaAttributesAttributeIdGet) GetUnitId() int64 {
	if o == nil || IsNil(o.UnitId) {
		var ret int64
		return ret
	}
	return *o.UnitId
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DogmaAttributesAttributeIdGet) GetUnitIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UnitId) {
		return nil, false
	}
	return o.UnitId, true
}

// HasUnitId returns a boolean if a field has been set.
func (o *DogmaAttributesAttributeIdGet) HasUnitId() bool {
	if o != nil && !IsNil(o.UnitId) {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given int64 and assigns it to the UnitId field.
func (o *DogmaAttributesAttributeIdGet) SetUnitId(v int64) {
	o.UnitId = &v
}

func (o DogmaAttributesAttributeIdGet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DogmaAttributesAttributeIdGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attribute_id"] = o.AttributeId
	if !IsNil(o.DefaultValue) {
		toSerialize["default_value"] = o.DefaultValue
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.HighIsGood) {
		toSerialize["high_is_good"] = o.HighIsGood
	}
	if !IsNil(o.IconId) {
		toSerialize["icon_id"] = o.IconId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Published) {
		toSerialize["published"] = o.Published
	}
	if !IsNil(o.Stackable) {
		toSerialize["stackable"] = o.Stackable
	}
	if !IsNil(o.UnitId) {
		toSerialize["unit_id"] = o.UnitId
	}
	return toSerialize, nil
}

func (o *DogmaAttributesAttributeIdGet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attribute_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDogmaAttributesAttributeIdGet := _DogmaAttributesAttributeIdGet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDogmaAttributesAttributeIdGet)

	if err != nil {
		return err
	}

	*o = DogmaAttributesAttributeIdGet(varDogmaAttributesAttributeIdGet)

	return err
}

type NullableDogmaAttributesAttributeIdGet struct {
	value *DogmaAttributesAttributeIdGet
	isSet bool
}

func (v NullableDogmaAttributesAttributeIdGet) Get() *DogmaAttributesAttributeIdGet {
	return v.value
}

func (v *NullableDogmaAttributesAttributeIdGet) Set(val *DogmaAttributesAttributeIdGet) {
	v.value = val
	v.isSet = true
}

func (v NullableDogmaAttributesAttributeIdGet) IsSet() bool {
	return v.isSet
}

func (v *NullableDogmaAttributesAttributeIdGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDogmaAttributesAttributeIdGet(val *DogmaAttributesAttributeIdGet) *NullableDogmaAttributesAttributeIdGet {
	return &NullableDogmaAttributesAttributeIdGet{value: val, isSet: true}
}

func (v NullableDogmaAttributesAttributeIdGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDogmaAttributesAttributeIdGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


