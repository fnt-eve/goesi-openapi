/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
)

// checks if the SolarSystemId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolarSystemId{}

// SolarSystemId struct for SolarSystemId
type SolarSystemId struct {
	SolarSystemId *int64 `json:"solar_system_id,omitempty"`
}

// NewSolarSystemId instantiates a new SolarSystemId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolarSystemId() *SolarSystemId {
	this := SolarSystemId{}
	return &this
}

// NewSolarSystemIdWithDefaults instantiates a new SolarSystemId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolarSystemIdWithDefaults() *SolarSystemId {
	this := SolarSystemId{}
	return &this
}

// GetSolarSystemId returns the SolarSystemId field value if set, zero value otherwise.
func (o *SolarSystemId) GetSolarSystemId() int64 {
	if o == nil || IsNil(o.SolarSystemId) {
		var ret int64
		return ret
	}
	return *o.SolarSystemId
}

// GetSolarSystemIdOk returns a tuple with the SolarSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolarSystemId) GetSolarSystemIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SolarSystemId) {
		return nil, false
	}
	return o.SolarSystemId, true
}

// HasSolarSystemId returns a boolean if a field has been set.
func (o *SolarSystemId) HasSolarSystemId() bool {
	if o != nil && !IsNil(o.SolarSystemId) {
		return true
	}

	return false
}

// SetSolarSystemId gets a reference to the given int64 and assigns it to the SolarSystemId field.
func (o *SolarSystemId) SetSolarSystemId(v int64) {
	o.SolarSystemId = &v
}

func (o SolarSystemId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolarSystemId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SolarSystemId) {
		toSerialize["solar_system_id"] = o.SolarSystemId
	}
	return toSerialize, nil
}

type NullableSolarSystemId struct {
	value *SolarSystemId
	isSet bool
}

func (v NullableSolarSystemId) Get() *SolarSystemId {
	return v.value
}

func (v *NullableSolarSystemId) Set(val *SolarSystemId) {
	v.value = val
	v.isSet = true
}

func (v NullableSolarSystemId) IsSet() bool {
	return v.isSet
}

func (v *NullableSolarSystemId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolarSystemId(val *SolarSystemId) *NullableSolarSystemId {
	return &NullableSolarSystemId{value: val, isSet: true}
}

func (v NullableSolarSystemId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolarSystemId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


