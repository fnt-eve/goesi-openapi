/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
)

// checks if the GroupId1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupId1{}

// GroupId1 struct for GroupId1
type GroupId1 struct {
	GroupId *int64 `json:"group_id,omitempty"`
}

// NewGroupId1 instantiates a new GroupId1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupId1() *GroupId1 {
	this := GroupId1{}
	return &this
}

// NewGroupId1WithDefaults instantiates a new GroupId1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupId1WithDefaults() *GroupId1 {
	this := GroupId1{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *GroupId1) GetGroupId() int64 {
	if o == nil || IsNil(o.GroupId) {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupId1) GetGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *GroupId1) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *GroupId1) SetGroupId(v int64) {
	o.GroupId = &v
}

func (o GroupId1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupId1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	return toSerialize, nil
}

type NullableGroupId1 struct {
	value *GroupId1
	isSet bool
}

func (v NullableGroupId1) Get() *GroupId1 {
	return v.value
}

func (v *NullableGroupId1) Set(val *GroupId1) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupId1) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupId1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupId1(val *GroupId1) *NullableGroupId1 {
	return &NullableGroupId1{value: val, isSet: true}
}

func (v NullableGroupId1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupId1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


