/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2020-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetaChangelog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaChangelog{}

// MetaChangelog struct for MetaChangelog
type MetaChangelog struct {
	// Per date, list changes for that date
	Changelog map[string][]MetaChangelogEntry `json:"changelog"`
}

type _MetaChangelog MetaChangelog

// NewMetaChangelog instantiates a new MetaChangelog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaChangelog(changelog map[string][]MetaChangelogEntry) *MetaChangelog {
	this := MetaChangelog{}
	this.Changelog = changelog
	return &this
}

// NewMetaChangelogWithDefaults instantiates a new MetaChangelog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaChangelogWithDefaults() *MetaChangelog {
	this := MetaChangelog{}
	return &this
}

// GetChangelog returns the Changelog field value
func (o *MetaChangelog) GetChangelog() map[string][]MetaChangelogEntry {
	if o == nil {
		var ret map[string][]MetaChangelogEntry
		return ret
	}

	return o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value
// and a boolean to check if the value has been set.
func (o *MetaChangelog) GetChangelogOk() (*map[string][]MetaChangelogEntry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Changelog, true
}

// SetChangelog sets field value
func (o *MetaChangelog) SetChangelog(v map[string][]MetaChangelogEntry) {
	o.Changelog = v
}

func (o MetaChangelog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaChangelog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["changelog"] = o.Changelog
	return toSerialize, nil
}

func (o *MetaChangelog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"changelog",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaChangelog := _MetaChangelog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaChangelog)

	if err != nil {
		return err
	}

	*o = MetaChangelog(varMetaChangelog)

	return err
}

type NullableMetaChangelog struct {
	value *MetaChangelog
	isSet bool
}

func (v NullableMetaChangelog) Get() *MetaChangelog {
	return v.value
}

func (v *NullableMetaChangelog) Set(val *MetaChangelog) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaChangelog) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaChangelog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaChangelog(val *MetaChangelog) *NullableMetaChangelog {
	return &NullableMetaChangelog{value: val, isSet: true}
}

func (v NullableMetaChangelog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaChangelog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


