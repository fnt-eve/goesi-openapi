/*
EVE Stable Infrastructure (ESI) - tranquility

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025-09-30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetaCompatibilityDates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaCompatibilityDates{}

// MetaCompatibilityDates struct for MetaCompatibilityDates
type MetaCompatibilityDates struct {
	// List of compatibility dates.
	CompatibilityDates []string `json:"compatibility_dates"`
}

type _MetaCompatibilityDates MetaCompatibilityDates

// NewMetaCompatibilityDates instantiates a new MetaCompatibilityDates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaCompatibilityDates(compatibilityDates []string) *MetaCompatibilityDates {
	this := MetaCompatibilityDates{}
	this.CompatibilityDates = compatibilityDates
	return &this
}

// NewMetaCompatibilityDatesWithDefaults instantiates a new MetaCompatibilityDates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaCompatibilityDatesWithDefaults() *MetaCompatibilityDates {
	this := MetaCompatibilityDates{}
	return &this
}

// GetCompatibilityDates returns the CompatibilityDates field value
func (o *MetaCompatibilityDates) GetCompatibilityDates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CompatibilityDates
}

// GetCompatibilityDatesOk returns a tuple with the CompatibilityDates field value
// and a boolean to check if the value has been set.
func (o *MetaCompatibilityDates) GetCompatibilityDatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompatibilityDates, true
}

// SetCompatibilityDates sets field value
func (o *MetaCompatibilityDates) SetCompatibilityDates(v []string) {
	o.CompatibilityDates = v
}

func (o MetaCompatibilityDates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaCompatibilityDates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compatibility_dates"] = o.CompatibilityDates
	return toSerialize, nil
}

func (o *MetaCompatibilityDates) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compatibility_dates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaCompatibilityDates := _MetaCompatibilityDates{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaCompatibilityDates)

	if err != nil {
		return err
	}

	*o = MetaCompatibilityDates(varMetaCompatibilityDates)

	return err
}

type NullableMetaCompatibilityDates struct {
	value *MetaCompatibilityDates
	isSet bool
}

func (v NullableMetaCompatibilityDates) Get() *MetaCompatibilityDates {
	return v.value
}

func (v *NullableMetaCompatibilityDates) Set(val *MetaCompatibilityDates) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaCompatibilityDates) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaCompatibilityDates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaCompatibilityDates(val *MetaCompatibilityDates) *NullableMetaCompatibilityDates {
	return &NullableMetaCompatibilityDates{value: val, isSet: true}
}

func (v NullableMetaCompatibilityDates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaCompatibilityDates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


